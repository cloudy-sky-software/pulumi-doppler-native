// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CloudySkySoftware.Pulumi.DopplerNative.WorkplaceV3
{
    [DopplerNativeResourceType("doppler-native:workplace/v3:ServiceAccountToken")]
    public partial class ServiceAccountToken : global::Pulumi.CustomResource
    {
        [Output("apiKey")]
        public Output<string?> ApiKey { get; private set; } = null!;

        [Output("apiToken")]
        public Output<Outputs.ApiTokenProperties?> ApiToken { get; private set; } = null!;

        /// <summary>
        /// The datetime at which the API token should expire. If not provided, the API token will remain vaild indefinitely unless manually revoked
        /// </summary>
        [Output("expiresAt")]
        public Output<string?> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// The display name of the API token
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        [Output("success")]
        public Output<bool?> Success { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceAccountToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceAccountToken(string name, ServiceAccountTokenArgs? args = null, CustomResourceOptions? options = null)
            : base("doppler-native:workplace/v3:ServiceAccountToken", name, args ?? new ServiceAccountTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceAccountToken(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("doppler-native:workplace/v3:ServiceAccountToken", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-doppler-native",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceAccountToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceAccountToken Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ServiceAccountToken(name, id, options);
        }
    }

    public sealed class ServiceAccountTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The datetime at which the API token should expire. If not provided, the API token will remain vaild indefinitely unless manually revoked
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// The display name of the API token
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Slug of the service account
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        public ServiceAccountTokenArgs()
        {
        }
        public static new ServiceAccountTokenArgs Empty => new ServiceAccountTokenArgs();
    }
}
