// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CloudySkySoftware.Pulumi.DopplerNative.ConfigsV3.Outputs
{

    [OutputType]
    public sealed class ChangeRequestsItemProperties
    {
        /// <summary>
        /// The name of the secret.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The original name of the secret. Use `null` (an actual `null`, not the string `null`) or omit this parameter for new secrets. If it differs from `name` then a rename is inferred.
        /// </summary>
        public readonly string OriginalName;
        /// <summary>
        /// The value you expect the secret to have before `name` is applied. If specified, the request will only be processed if the provided value matches what's found in Doppler.
        /// </summary>
        public readonly string? OriginalValue;
        /// <summary>
        /// The valueType you expect the secret to have before `valueType` is applied. If specified, the request will only be processed if the provided valueType matches what's found in Doppler.
        /// </summary>
        public readonly Outputs.ChangeRequestsItemPropertiesOriginalValueTypeProperties? OriginalValueType;
        /// <summary>
        /// Must be set to either `masked`, `unmasked`, or `restricted`. The visibility you expect the secret to have before `visibility` is applied. If specified, the request will only be processed if the provided visibility matches what's found in Doppler.
        /// </summary>
        public readonly string? OriginalVisibility;
        /// <summary>
        /// Defaults to `false`. Can only be set to `true` if the config being updated is a branch config and there is a secret with the same name in the root config. In this case, the branch secret will inherit the value and visibility type from the root secret.
        /// </summary>
        public readonly bool? ShouldConverge;
        /// <summary>
        /// Defaults to `false`. If set to `true`, will delete the secret matching the `name` field.
        /// </summary>
        public readonly bool? ShouldDelete;
        /// <summary>
        /// Defaults to `false`. Can only be set to `true` if the config being updated is a branch config. If set to `true`, the provided secret will be set in both the branch config as well as the root config in that environment.
        /// </summary>
        public readonly bool? ShouldPromote;
        /// <summary>
        /// The value the secret should have. Use `null` (an actual `null`, not the string `null`) to leave the existing secret value unchanged.
        /// </summary>
        public readonly string Value;
        /// <summary>
        /// The default valueType (string) will result in no validations being applied.
        /// </summary>
        public readonly Outputs.ChangeRequestsItemPropertiesValueTypeProperties? ValueType;
        /// <summary>
        /// Must be set to either `masked`, `unmasked`, or `restricted`.
        /// </summary>
        public readonly string? Visibility;

        [OutputConstructor]
        private ChangeRequestsItemProperties(
            string name,

            string originalName,

            string? originalValue,

            Outputs.ChangeRequestsItemPropertiesOriginalValueTypeProperties? originalValueType,

            string? originalVisibility,

            bool? shouldConverge,

            bool? shouldDelete,

            bool? shouldPromote,

            string value,

            Outputs.ChangeRequestsItemPropertiesValueTypeProperties? valueType,

            string? visibility)
        {
            Name = name;
            OriginalName = originalName;
            OriginalValue = originalValue;
            OriginalValueType = originalValueType;
            OriginalVisibility = originalVisibility;
            ShouldConverge = shouldConverge;
            ShouldDelete = shouldDelete;
            ShouldPromote = shouldPromote;
            Value = value;
            ValueType = valueType;
            Visibility = visibility;
        }
    }
}
