// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectMember struct {
	pulumi.CustomResourceState

	// Environment slugs to grant the member access to
	Environments pulumi.StringArrayOutput  `pulumi:"environments"`
	Member       MemberPropertiesPtrOutput `pulumi:"member"`
	// Identifier of the project role
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// Member's slug
	Slug pulumi.StringOutput `pulumi:"slug"`
	Type TypeOutput          `pulumi:"type"`
}

// NewProjectMember registers a new resource with the given unique name, arguments, and options.
func NewProjectMember(ctx *pulumi.Context,
	name string, args *ProjectMemberArgs, opts ...pulumi.ResourceOption) (*ProjectMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectMember
	err := ctx.RegisterResource("doppler-native:projects/v3:ProjectMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectMember gets an existing ProjectMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectMemberState, opts ...pulumi.ResourceOption) (*ProjectMember, error) {
	var resource ProjectMember
	err := ctx.ReadResource("doppler-native:projects/v3:ProjectMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectMember resources.
type projectMemberState struct {
}

type ProjectMemberState struct {
}

func (ProjectMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMemberState)(nil)).Elem()
}

type projectMemberArgs struct {
	// Environment slugs to grant the member access to
	Environments []string `pulumi:"environments"`
	// Identifier of the project role
	Role *string `pulumi:"role"`
	// Member's slug
	Slug string `pulumi:"slug"`
	Type Type   `pulumi:"type"`
}

// The set of arguments for constructing a ProjectMember resource.
type ProjectMemberArgs struct {
	// Environment slugs to grant the member access to
	Environments pulumi.StringArrayInput
	// Identifier of the project role
	Role pulumi.StringPtrInput
	// Member's slug
	Slug pulumi.StringInput
	Type TypeInput
}

func (ProjectMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMemberArgs)(nil)).Elem()
}

type ProjectMemberInput interface {
	pulumi.Input

	ToProjectMemberOutput() ProjectMemberOutput
	ToProjectMemberOutputWithContext(ctx context.Context) ProjectMemberOutput
}

func (*ProjectMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMember)(nil)).Elem()
}

func (i *ProjectMember) ToProjectMemberOutput() ProjectMemberOutput {
	return i.ToProjectMemberOutputWithContext(context.Background())
}

func (i *ProjectMember) ToProjectMemberOutputWithContext(ctx context.Context) ProjectMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberOutput)
}

type ProjectMemberOutput struct{ *pulumi.OutputState }

func (ProjectMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMember)(nil)).Elem()
}

func (o ProjectMemberOutput) ToProjectMemberOutput() ProjectMemberOutput {
	return o
}

func (o ProjectMemberOutput) ToProjectMemberOutputWithContext(ctx context.Context) ProjectMemberOutput {
	return o
}

// Environment slugs to grant the member access to
func (o ProjectMemberOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectMember) pulumi.StringArrayOutput { return v.Environments }).(pulumi.StringArrayOutput)
}

func (o ProjectMemberOutput) Member() MemberPropertiesPtrOutput {
	return o.ApplyT(func(v *ProjectMember) MemberPropertiesPtrOutput { return v.Member }).(MemberPropertiesPtrOutput)
}

// Identifier of the project role
func (o ProjectMemberOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectMember) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// Member's slug
func (o ProjectMemberOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMember) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o ProjectMemberOutput) Type() TypeOutput {
	return o.ApplyT(func(v *ProjectMember) TypeOutput { return v.Type }).(TypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberInput)(nil)).Elem(), &ProjectMember{})
	pulumi.RegisterOutputType(ProjectMemberOutput{})
}
