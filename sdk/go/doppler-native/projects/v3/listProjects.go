// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func ListProjects(ctx *pulumi.Context, args *ListProjectsArgs, opts ...pulumi.InvokeOption) (*ListProjectsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ListProjectsResult
	err := ctx.Invoke("doppler-native:projects/v3:listProjects", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type ListProjectsArgs struct {
}

type ListProjectsResult struct {
	Page     *int                                           `pulumi:"page"`
	Projects []ListProjectsPropertiesProjectsItemProperties `pulumi:"projects"`
}

// Defaults sets the appropriate defaults for ListProjectsResult
func (val *ListProjectsResult) Defaults() *ListProjectsResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Page == nil {
		page_ := 0
		tmp.Page = &page_
	}
	return &tmp
}

func ListProjectsOutput(ctx *pulumi.Context, args ListProjectsOutputArgs, opts ...pulumi.InvokeOption) ListProjectsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListProjectsResultOutput, error) {
			args := v.(ListProjectsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv ListProjectsResult
			secret, err := ctx.InvokePackageRaw("doppler-native:projects/v3:listProjects", args, &rv, "", opts...)
			if err != nil {
				return ListProjectsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(ListProjectsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(ListProjectsResultOutput), nil
			}
			return output, nil
		}).(ListProjectsResultOutput)
}

type ListProjectsOutputArgs struct {
}

func (ListProjectsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListProjectsArgs)(nil)).Elem()
}

type ListProjectsResultOutput struct{ *pulumi.OutputState }

func (ListProjectsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListProjectsResult)(nil)).Elem()
}

func (o ListProjectsResultOutput) ToListProjectsResultOutput() ListProjectsResultOutput {
	return o
}

func (o ListProjectsResultOutput) ToListProjectsResultOutputWithContext(ctx context.Context) ListProjectsResultOutput {
	return o
}

func (o ListProjectsResultOutput) Page() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListProjectsResult) *int { return v.Page }).(pulumi.IntPtrOutput)
}

func (o ListProjectsResultOutput) Projects() ListProjectsPropertiesProjectsItemPropertiesArrayOutput {
	return o.ApplyT(func(v ListProjectsResult) []ListProjectsPropertiesProjectsItemProperties { return v.Projects }).(ListProjectsPropertiesProjectsItemPropertiesArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListProjectsResultOutput{})
}
