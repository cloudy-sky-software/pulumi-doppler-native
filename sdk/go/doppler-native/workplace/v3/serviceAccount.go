// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServiceAccount struct {
	pulumi.CustomResourceState

	Name           pulumi.StringPtrOutput            `pulumi:"name"`
	ServiceAccount ServiceAccountPropertiesPtrOutput `pulumi:"serviceAccount"`
	// You may provide an identifier OR permissions, but not both
	WorkplaceRole WorkplaceRolePropertiesPtrOutput `pulumi:"workplaceRole"`
}

// NewServiceAccount registers a new resource with the given unique name, arguments, and options.
func NewServiceAccount(ctx *pulumi.Context,
	name string, args *ServiceAccountArgs, opts ...pulumi.ResourceOption) (*ServiceAccount, error) {
	if args == nil {
		args = &ServiceAccountArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAccount
	err := ctx.RegisterResource("doppler-native:workplace/v3:ServiceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccount gets an existing ServiceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountState, opts ...pulumi.ResourceOption) (*ServiceAccount, error) {
	var resource ServiceAccount
	err := ctx.ReadResource("doppler-native:workplace/v3:ServiceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccount resources.
type serviceAccountState struct {
}

type ServiceAccountState struct {
}

func (ServiceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountState)(nil)).Elem()
}

type serviceAccountArgs struct {
	Name *string `pulumi:"name"`
	// You may provide an identifier OR permissions, but not both
	WorkplaceRole *WorkplaceRoleProperties `pulumi:"workplaceRole"`
}

// The set of arguments for constructing a ServiceAccount resource.
type ServiceAccountArgs struct {
	Name pulumi.StringPtrInput
	// You may provide an identifier OR permissions, but not both
	WorkplaceRole WorkplaceRolePropertiesPtrInput
}

func (ServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountArgs)(nil)).Elem()
}

type ServiceAccountInput interface {
	pulumi.Input

	ToServiceAccountOutput() ServiceAccountOutput
	ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput
}

func (*ServiceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccount)(nil)).Elem()
}

func (i *ServiceAccount) ToServiceAccountOutput() ServiceAccountOutput {
	return i.ToServiceAccountOutputWithContext(context.Background())
}

func (i *ServiceAccount) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountOutput)
}

type ServiceAccountOutput struct{ *pulumi.OutputState }

func (ServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountOutput) ToServiceAccountOutput() ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ServiceAccountOutput) ServiceAccount() ServiceAccountPropertiesPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) ServiceAccountPropertiesPtrOutput { return v.ServiceAccount }).(ServiceAccountPropertiesPtrOutput)
}

// You may provide an identifier OR permissions, but not both
func (o ServiceAccountOutput) WorkplaceRole() WorkplaceRolePropertiesPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) WorkplaceRolePropertiesPtrOutput { return v.WorkplaceRole }).(WorkplaceRolePropertiesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountInput)(nil)).Elem(), &ServiceAccount{})
	pulumi.RegisterOutputType(ServiceAccountOutput{})
}
