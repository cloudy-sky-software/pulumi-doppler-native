// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServiceAccountToken struct {
	pulumi.CustomResourceState

	ApiKey   pulumi.StringPtrOutput      `pulumi:"apiKey"`
	ApiToken ApiTokenPropertiesPtrOutput `pulumi:"apiToken"`
	// The datetime at which the API token should expire. If not provided, the API token will remain vaild indefinitely unless manually revoked
	ExpiresAt pulumi.StringPtrOutput `pulumi:"expiresAt"`
	// The display name of the API token
	Name    pulumi.StringPtrOutput `pulumi:"name"`
	Success pulumi.BoolPtrOutput   `pulumi:"success"`
}

// NewServiceAccountToken registers a new resource with the given unique name, arguments, and options.
func NewServiceAccountToken(ctx *pulumi.Context,
	name string, args *ServiceAccountTokenArgs, opts ...pulumi.ResourceOption) (*ServiceAccountToken, error) {
	if args == nil {
		args = &ServiceAccountTokenArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAccountToken
	err := ctx.RegisterResource("doppler-native:workplace/v3:ServiceAccountToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccountToken gets an existing ServiceAccountToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccountToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountTokenState, opts ...pulumi.ResourceOption) (*ServiceAccountToken, error) {
	var resource ServiceAccountToken
	err := ctx.ReadResource("doppler-native:workplace/v3:ServiceAccountToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccountToken resources.
type serviceAccountTokenState struct {
}

type ServiceAccountTokenState struct {
}

func (ServiceAccountTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountTokenState)(nil)).Elem()
}

type serviceAccountTokenArgs struct {
	// The datetime at which the API token should expire. If not provided, the API token will remain vaild indefinitely unless manually revoked
	ExpiresAt *string `pulumi:"expiresAt"`
	// The display name of the API token
	Name *string `pulumi:"name"`
	// Slug of the service account
	ServiceAccount *string `pulumi:"serviceAccount"`
}

// The set of arguments for constructing a ServiceAccountToken resource.
type ServiceAccountTokenArgs struct {
	// The datetime at which the API token should expire. If not provided, the API token will remain vaild indefinitely unless manually revoked
	ExpiresAt pulumi.StringPtrInput
	// The display name of the API token
	Name pulumi.StringPtrInput
	// Slug of the service account
	ServiceAccount pulumi.StringPtrInput
}

func (ServiceAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountTokenArgs)(nil)).Elem()
}

type ServiceAccountTokenInput interface {
	pulumi.Input

	ToServiceAccountTokenOutput() ServiceAccountTokenOutput
	ToServiceAccountTokenOutputWithContext(ctx context.Context) ServiceAccountTokenOutput
}

func (*ServiceAccountToken) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountToken)(nil)).Elem()
}

func (i *ServiceAccountToken) ToServiceAccountTokenOutput() ServiceAccountTokenOutput {
	return i.ToServiceAccountTokenOutputWithContext(context.Background())
}

func (i *ServiceAccountToken) ToServiceAccountTokenOutputWithContext(ctx context.Context) ServiceAccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountTokenOutput)
}

type ServiceAccountTokenOutput struct{ *pulumi.OutputState }

func (ServiceAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountToken)(nil)).Elem()
}

func (o ServiceAccountTokenOutput) ToServiceAccountTokenOutput() ServiceAccountTokenOutput {
	return o
}

func (o ServiceAccountTokenOutput) ToServiceAccountTokenOutputWithContext(ctx context.Context) ServiceAccountTokenOutput {
	return o
}

func (o ServiceAccountTokenOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountToken) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

func (o ServiceAccountTokenOutput) ApiToken() ApiTokenPropertiesPtrOutput {
	return o.ApplyT(func(v *ServiceAccountToken) ApiTokenPropertiesPtrOutput { return v.ApiToken }).(ApiTokenPropertiesPtrOutput)
}

// The datetime at which the API token should expire. If not provided, the API token will remain vaild indefinitely unless manually revoked
func (o ServiceAccountTokenOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountToken) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// The display name of the API token
func (o ServiceAccountTokenOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountToken) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ServiceAccountTokenOutput) Success() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAccountToken) pulumi.BoolPtrOutput { return v.Success }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountTokenInput)(nil)).Elem(), &ServiceAccountToken{})
	pulumi.RegisterOutputType(ServiceAccountTokenOutput{})
}
