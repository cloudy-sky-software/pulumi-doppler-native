// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WorkplaceRole struct {
	pulumi.CustomResourceState

	// The name of the role
	Name pulumi.StringOutput `pulumi:"name"`
	// An array containing the permissions the role has. Valid permissions are: `all_enclave_projects_admin`, `all_enclave_projects`, `billing_manage`, `billing`, `create_enclave_project`, `custom_roles_manage`, `ekm`, `enclave_secrets_referencing`, `logs_audit`, `logs`, `service_account_api_tokens_manage`, `service_account_api_tokens`, `service_accounts_manage`, `service_accounts`, `settings_manage`, `settings`, `team_manage`, `team`, `verified_domains_manage`, `verified_domains`, `workplace_default_environments_manage`, `workplace_default_environments_read`, `workplace_integrations_list`, `workplace_integrations_manage`, `workplace_integrations_read`
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	Role        RolePropertiesPtrOutput  `pulumi:"role"`
}

// NewWorkplaceRole registers a new resource with the given unique name, arguments, and options.
func NewWorkplaceRole(ctx *pulumi.Context,
	name string, args *WorkplaceRoleArgs, opts ...pulumi.ResourceOption) (*WorkplaceRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkplaceRole
	err := ctx.RegisterResource("doppler-native:workplace/v3:WorkplaceRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkplaceRole gets an existing WorkplaceRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkplaceRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkplaceRoleState, opts ...pulumi.ResourceOption) (*WorkplaceRole, error) {
	var resource WorkplaceRole
	err := ctx.ReadResource("doppler-native:workplace/v3:WorkplaceRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkplaceRole resources.
type workplaceRoleState struct {
}

type WorkplaceRoleState struct {
}

func (WorkplaceRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*workplaceRoleState)(nil)).Elem()
}

type workplaceRoleArgs struct {
	// The name of the role
	Name *string `pulumi:"name"`
	// An array containing the permissions the role has. Valid permissions are: `all_enclave_projects_admin`, `all_enclave_projects`, `billing_manage`, `billing`, `create_enclave_project`, `custom_roles_manage`, `ekm`, `enclave_secrets_referencing`, `logs_audit`, `logs`, `service_account_api_tokens_manage`, `service_account_api_tokens`, `service_accounts_manage`, `service_accounts`, `settings_manage`, `settings`, `team_manage`, `team`, `verified_domains_manage`, `verified_domains`, `workplace_default_environments_manage`, `workplace_default_environments_read`, `workplace_integrations_list`, `workplace_integrations_manage`, `workplace_integrations_read`
	Permissions []string `pulumi:"permissions"`
}

// The set of arguments for constructing a WorkplaceRole resource.
type WorkplaceRoleArgs struct {
	// The name of the role
	Name pulumi.StringPtrInput
	// An array containing the permissions the role has. Valid permissions are: `all_enclave_projects_admin`, `all_enclave_projects`, `billing_manage`, `billing`, `create_enclave_project`, `custom_roles_manage`, `ekm`, `enclave_secrets_referencing`, `logs_audit`, `logs`, `service_account_api_tokens_manage`, `service_account_api_tokens`, `service_accounts_manage`, `service_accounts`, `settings_manage`, `settings`, `team_manage`, `team`, `verified_domains_manage`, `verified_domains`, `workplace_default_environments_manage`, `workplace_default_environments_read`, `workplace_integrations_list`, `workplace_integrations_manage`, `workplace_integrations_read`
	Permissions pulumi.StringArrayInput
}

func (WorkplaceRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workplaceRoleArgs)(nil)).Elem()
}

type WorkplaceRoleInput interface {
	pulumi.Input

	ToWorkplaceRoleOutput() WorkplaceRoleOutput
	ToWorkplaceRoleOutputWithContext(ctx context.Context) WorkplaceRoleOutput
}

func (*WorkplaceRole) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkplaceRole)(nil)).Elem()
}

func (i *WorkplaceRole) ToWorkplaceRoleOutput() WorkplaceRoleOutput {
	return i.ToWorkplaceRoleOutputWithContext(context.Background())
}

func (i *WorkplaceRole) ToWorkplaceRoleOutputWithContext(ctx context.Context) WorkplaceRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkplaceRoleOutput)
}

type WorkplaceRoleOutput struct{ *pulumi.OutputState }

func (WorkplaceRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkplaceRole)(nil)).Elem()
}

func (o WorkplaceRoleOutput) ToWorkplaceRoleOutput() WorkplaceRoleOutput {
	return o
}

func (o WorkplaceRoleOutput) ToWorkplaceRoleOutputWithContext(ctx context.Context) WorkplaceRoleOutput {
	return o
}

// The name of the role
func (o WorkplaceRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkplaceRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array containing the permissions the role has. Valid permissions are: `all_enclave_projects_admin`, `all_enclave_projects`, `billing_manage`, `billing`, `create_enclave_project`, `custom_roles_manage`, `ekm`, `enclave_secrets_referencing`, `logs_audit`, `logs`, `service_account_api_tokens_manage`, `service_account_api_tokens`, `service_accounts_manage`, `service_accounts`, `settings_manage`, `settings`, `team_manage`, `team`, `verified_domains_manage`, `verified_domains`, `workplace_default_environments_manage`, `workplace_default_environments_read`, `workplace_integrations_list`, `workplace_integrations_manage`, `workplace_integrations_read`
func (o WorkplaceRoleOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkplaceRole) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

func (o WorkplaceRoleOutput) Role() RolePropertiesPtrOutput {
	return o.ApplyT(func(v *WorkplaceRole) RolePropertiesPtrOutput { return v.Role }).(RolePropertiesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkplaceRoleInput)(nil)).Elem(), &WorkplaceRole{})
	pulumi.RegisterOutputType(WorkplaceRoleOutput{})
}
