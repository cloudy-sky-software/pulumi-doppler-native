// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func ListUsers(ctx *pulumi.Context, args *ListUsersArgs, opts ...pulumi.InvokeOption) (*ListUsersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ListUsersResult
	err := ctx.Invoke("doppler-native:workplace/v3:listUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type ListUsersArgs struct {
}

type ListUsersResult struct {
	Page           *int                                              `pulumi:"page"`
	Success        *bool                                             `pulumi:"success"`
	WorkplaceUsers []ListUsersPropertiesWorkplaceUsersItemProperties `pulumi:"workplaceUsers"`
}

// Defaults sets the appropriate defaults for ListUsersResult
func (val *ListUsersResult) Defaults() *ListUsersResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Page == nil {
		page_ := 0
		tmp.Page = &page_
	}
	if tmp.Success == nil {
		success_ := true
		tmp.Success = &success_
	}
	return &tmp
}

func ListUsersOutput(ctx *pulumi.Context, args ListUsersOutputArgs, opts ...pulumi.InvokeOption) ListUsersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListUsersResultOutput, error) {
			args := v.(ListUsersArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv ListUsersResult
			secret, err := ctx.InvokePackageRaw("doppler-native:workplace/v3:listUsers", args, &rv, "", opts...)
			if err != nil {
				return ListUsersResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(ListUsersResultOutput)
			if secret {
				return pulumi.ToSecret(output).(ListUsersResultOutput), nil
			}
			return output, nil
		}).(ListUsersResultOutput)
}

type ListUsersOutputArgs struct {
}

func (ListUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListUsersArgs)(nil)).Elem()
}

type ListUsersResultOutput struct{ *pulumi.OutputState }

func (ListUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListUsersResult)(nil)).Elem()
}

func (o ListUsersResultOutput) ToListUsersResultOutput() ListUsersResultOutput {
	return o
}

func (o ListUsersResultOutput) ToListUsersResultOutputWithContext(ctx context.Context) ListUsersResultOutput {
	return o
}

func (o ListUsersResultOutput) Page() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListUsersResult) *int { return v.Page }).(pulumi.IntPtrOutput)
}

func (o ListUsersResultOutput) Success() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ListUsersResult) *bool { return v.Success }).(pulumi.BoolPtrOutput)
}

func (o ListUsersResultOutput) WorkplaceUsers() ListUsersPropertiesWorkplaceUsersItemPropertiesArrayOutput {
	return o.ApplyT(func(v ListUsersResult) []ListUsersPropertiesWorkplaceUsersItemProperties { return v.WorkplaceUsers }).(ListUsersPropertiesWorkplaceUsersItemPropertiesArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListUsersResultOutput{})
}
