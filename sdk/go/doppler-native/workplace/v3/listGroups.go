// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-doppler-native/sdk/go/doppler-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func ListGroups(ctx *pulumi.Context, args *ListGroupsArgs, opts ...pulumi.InvokeOption) (*ListGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ListGroupsResult
	err := ctx.Invoke("doppler-native:workplace/v3:listGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListGroupsArgs struct {
}

type ListGroupsResult struct {
	Groups []ListGroupsPropertiesGroupsItemProperties `pulumi:"groups"`
}

func ListGroupsOutput(ctx *pulumi.Context, args ListGroupsOutputArgs, opts ...pulumi.InvokeOption) ListGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListGroupsResultOutput, error) {
			args := v.(ListGroupsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv ListGroupsResult
			secret, err := ctx.InvokePackageRaw("doppler-native:workplace/v3:listGroups", args, &rv, "", opts...)
			if err != nil {
				return ListGroupsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(ListGroupsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(ListGroupsResultOutput), nil
			}
			return output, nil
		}).(ListGroupsResultOutput)
}

type ListGroupsOutputArgs struct {
}

func (ListGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListGroupsArgs)(nil)).Elem()
}

type ListGroupsResultOutput struct{ *pulumi.OutputState }

func (ListGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListGroupsResult)(nil)).Elem()
}

func (o ListGroupsResultOutput) ToListGroupsResultOutput() ListGroupsResultOutput {
	return o
}

func (o ListGroupsResultOutput) ToListGroupsResultOutputWithContext(ctx context.Context) ListGroupsResultOutput {
	return o
}

func (o ListGroupsResultOutput) Groups() ListGroupsPropertiesGroupsItemPropertiesArrayOutput {
	return o.ApplyT(func(v ListGroupsResult) []ListGroupsPropertiesGroupsItemProperties { return v.Groups }).(ListGroupsPropertiesGroupsItemPropertiesArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListGroupsResultOutput{})
}
