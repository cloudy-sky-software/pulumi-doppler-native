// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ConfigArgs } from "./config";
export type Config = import("./config").Config;
export const Config: typeof import("./config").Config = null as any;
utilities.lazyLoad(exports, ["Config"], () => require("./config"));

export { ConfigLogsRollbackArgs } from "./configLogsRollback";
export type ConfigLogsRollback = import("./configLogsRollback").ConfigLogsRollback;
export const ConfigLogsRollback: typeof import("./configLogsRollback").ConfigLogsRollback = null as any;
utilities.lazyLoad(exports, ["ConfigLogsRollback"], () => require("./configLogsRollback"));

export { ConfigsCloneArgs } from "./configsClone";
export type ConfigsClone = import("./configsClone").ConfigsClone;
export const ConfigsClone: typeof import("./configsClone").ConfigsClone = null as any;
utilities.lazyLoad(exports, ["ConfigsClone"], () => require("./configsClone"));

export { ConfigsLockArgs } from "./configsLock";
export type ConfigsLock = import("./configsLock").ConfigsLock;
export const ConfigsLock: typeof import("./configsLock").ConfigsLock = null as any;
utilities.lazyLoad(exports, ["ConfigsLock"], () => require("./configsLock"));

export { ConfigsTrustedIpArgs } from "./configsTrustedIp";
export type ConfigsTrustedIp = import("./configsTrustedIp").ConfigsTrustedIp;
export const ConfigsTrustedIp: typeof import("./configsTrustedIp").ConfigsTrustedIp = null as any;
utilities.lazyLoad(exports, ["ConfigsTrustedIp"], () => require("./configsTrustedIp"));

export { ConfigsUnlockArgs } from "./configsUnlock";
export type ConfigsUnlock = import("./configsUnlock").ConfigsUnlock;
export const ConfigsUnlock: typeof import("./configsUnlock").ConfigsUnlock = null as any;
utilities.lazyLoad(exports, ["ConfigsUnlock"], () => require("./configsUnlock"));

export { ConfigsUpdateArgs } from "./configsUpdate";
export type ConfigsUpdate = import("./configsUpdate").ConfigsUpdate;
export const ConfigsUpdate: typeof import("./configsUpdate").ConfigsUpdate = null as any;
utilities.lazyLoad(exports, ["ConfigsUpdate"], () => require("./configsUpdate"));

export { DynamicSecretsIssueLeaseArgs } from "./dynamicSecretsIssueLease";
export type DynamicSecretsIssueLease = import("./dynamicSecretsIssueLease").DynamicSecretsIssueLease;
export const DynamicSecretsIssueLease: typeof import("./dynamicSecretsIssueLease").DynamicSecretsIssueLease = null as any;
utilities.lazyLoad(exports, ["DynamicSecretsIssueLease"], () => require("./dynamicSecretsIssueLease"));

export { GetConfigArgs } from "./getConfig";
export const getConfig: typeof import("./getConfig").getConfig = null as any;
export const getConfigOutput: typeof import("./getConfig").getConfigOutput = null as any;
utilities.lazyLoad(exports, ["getConfig","getConfigOutput"], () => require("./getConfig"));

export { GetConfigLogArgs } from "./getConfigLog";
export const getConfigLog: typeof import("./getConfigLog").getConfigLog = null as any;
export const getConfigLogOutput: typeof import("./getConfigLog").getConfigLogOutput = null as any;
utilities.lazyLoad(exports, ["getConfigLog","getConfigLogOutput"], () => require("./getConfigLog"));

export { GetSecretArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));

export { GetSecretsDownloadArgs } from "./getSecretsDownload";
export const getSecretsDownload: typeof import("./getSecretsDownload").getSecretsDownload = null as any;
export const getSecretsDownloadOutput: typeof import("./getSecretsDownload").getSecretsDownloadOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsDownload","getSecretsDownloadOutput"], () => require("./getSecretsDownload"));

export { GetSecretsNameArgs } from "./getSecretsName";
export const getSecretsName: typeof import("./getSecretsName").getSecretsName = null as any;
export const getSecretsNameOutput: typeof import("./getSecretsName").getSecretsNameOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsName","getSecretsNameOutput"], () => require("./getSecretsName"));

export { GetSyncArgs } from "./getSync";
export const getSync: typeof import("./getSync").getSync = null as any;
export const getSyncOutput: typeof import("./getSync").getSyncOutput = null as any;
utilities.lazyLoad(exports, ["getSync","getSyncOutput"], () => require("./getSync"));

export { ListConfigLogsArgs } from "./listConfigLogs";
export const listConfigLogs: typeof import("./listConfigLogs").listConfigLogs = null as any;
export const listConfigLogsOutput: typeof import("./listConfigLogs").listConfigLogsOutput = null as any;
utilities.lazyLoad(exports, ["listConfigLogs","listConfigLogsOutput"], () => require("./listConfigLogs"));

export { ListConfigsArgs } from "./listConfigs";
export const listConfigs: typeof import("./listConfigs").listConfigs = null as any;
export const listConfigsOutput: typeof import("./listConfigs").listConfigsOutput = null as any;
utilities.lazyLoad(exports, ["listConfigs","listConfigsOutput"], () => require("./listConfigs"));

export { ListConfigsTrustedIpsArgs } from "./listConfigsTrustedIps";
export const listConfigsTrustedIps: typeof import("./listConfigsTrustedIps").listConfigsTrustedIps = null as any;
export const listConfigsTrustedIpsOutput: typeof import("./listConfigsTrustedIps").listConfigsTrustedIpsOutput = null as any;
utilities.lazyLoad(exports, ["listConfigsTrustedIps","listConfigsTrustedIpsOutput"], () => require("./listConfigsTrustedIps"));

export { ListSecretsArgs } from "./listSecrets";
export const listSecrets: typeof import("./listSecrets").listSecrets = null as any;
export const listSecretsOutput: typeof import("./listSecrets").listSecretsOutput = null as any;
utilities.lazyLoad(exports, ["listSecrets","listSecretsOutput"], () => require("./listSecrets"));

export { ListServiceTokensArgs } from "./listServiceTokens";
export const listServiceTokens: typeof import("./listServiceTokens").listServiceTokens = null as any;
export const listServiceTokensOutput: typeof import("./listServiceTokens").listServiceTokensOutput = null as any;
utilities.lazyLoad(exports, ["listServiceTokens","listServiceTokensOutput"], () => require("./listServiceTokens"));

export { SecretsUpdateArgs } from "./secretsUpdate";
export type SecretsUpdate = import("./secretsUpdate").SecretsUpdate;
export const SecretsUpdate: typeof import("./secretsUpdate").SecretsUpdate = null as any;
utilities.lazyLoad(exports, ["SecretsUpdate"], () => require("./secretsUpdate"));

export { SecretsUpdateNoteArgs } from "./secretsUpdateNote";
export type SecretsUpdateNote = import("./secretsUpdateNote").SecretsUpdateNote;
export const SecretsUpdateNote: typeof import("./secretsUpdateNote").SecretsUpdateNote = null as any;
utilities.lazyLoad(exports, ["SecretsUpdateNote"], () => require("./secretsUpdateNote"));

export { ServiceTokenArgs } from "./serviceToken";
export type ServiceToken = import("./serviceToken").ServiceToken;
export const ServiceToken: typeof import("./serviceToken").ServiceToken = null as any;
utilities.lazyLoad(exports, ["ServiceToken"], () => require("./serviceToken"));

export { SyncArgs } from "./sync";
export type Sync = import("./sync").Sync;
export const Sync: typeof import("./sync").Sync = null as any;
utilities.lazyLoad(exports, ["Sync"], () => require("./sync"));


// Export enums:
export * from "../../types/enums/configs/v3";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "doppler-native:configs/v3:Config":
                return new Config(name, <any>undefined, { urn })
            case "doppler-native:configs/v3:ConfigLogsRollback":
                return new ConfigLogsRollback(name, <any>undefined, { urn })
            case "doppler-native:configs/v3:ConfigsClone":
                return new ConfigsClone(name, <any>undefined, { urn })
            case "doppler-native:configs/v3:ConfigsLock":
                return new ConfigsLock(name, <any>undefined, { urn })
            case "doppler-native:configs/v3:ConfigsTrustedIp":
                return new ConfigsTrustedIp(name, <any>undefined, { urn })
            case "doppler-native:configs/v3:ConfigsUnlock":
                return new ConfigsUnlock(name, <any>undefined, { urn })
            case "doppler-native:configs/v3:ConfigsUpdate":
                return new ConfigsUpdate(name, <any>undefined, { urn })
            case "doppler-native:configs/v3:DynamicSecretsIssueLease":
                return new DynamicSecretsIssueLease(name, <any>undefined, { urn })
            case "doppler-native:configs/v3:SecretsUpdate":
                return new SecretsUpdate(name, <any>undefined, { urn })
            case "doppler-native:configs/v3:SecretsUpdateNote":
                return new SecretsUpdateNote(name, <any>undefined, { urn })
            case "doppler-native:configs/v3:ServiceToken":
                return new ServiceToken(name, <any>undefined, { urn })
            case "doppler-native:configs/v3:Sync":
                return new Sync(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("doppler-native", "configs/v3", _module)
