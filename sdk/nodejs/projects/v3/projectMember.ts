// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class ProjectMember extends pulumi.CustomResource {
    /**
     * Get an existing ProjectMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ProjectMember {
        return new ProjectMember(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'doppler-native:projects/v3:ProjectMember';

    /**
     * Returns true if the given object is an instance of ProjectMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectMember.__pulumiType;
    }

    /**
     * Environment slugs to grant the member access to
     */
    public readonly environments!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly member!: pulumi.Output<outputs.projects.v3.MemberProperties | undefined>;
    /**
     * Identifier of the project role
     */
    public readonly role!: pulumi.Output<string | undefined>;
    /**
     * Member's slug
     */
    public readonly slug!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<enums.projects.v3.Type>;

    /**
     * Create a ProjectMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectMemberArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["environments"] = args ? args.environments : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["member"] = undefined /*out*/;
        } else {
            resourceInputs["environments"] = undefined /*out*/;
            resourceInputs["member"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["slug"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectMember.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ProjectMember resource.
 */
export interface ProjectMemberArgs {
    /**
     * Environment slugs to grant the member access to
     */
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the project role
     */
    role?: pulumi.Input<string>;
    /**
     * Member's slug
     */
    slug: pulumi.Input<string>;
    type: pulumi.Input<enums.projects.v3.Type>;
}
