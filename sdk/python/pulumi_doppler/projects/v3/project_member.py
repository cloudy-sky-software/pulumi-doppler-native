# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = ['ProjectMemberArgs', 'ProjectMember']

@pulumi.input_type
class ProjectMemberArgs:
    def __init__(__self__, *,
                 slug: pulumi.Input[str],
                 type: pulumi.Input['Type'],
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProjectMember resource.
        :param pulumi.Input[str] slug: Member's slug
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: Environment slugs to grant the member access to
        :param pulumi.Input[str] role: Identifier of the project role
        """
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "type", type)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        """
        Member's slug
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['Type']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['Type']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Environment slugs to grant the member access to
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the project role
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


class ProjectMember(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['Type']] = None,
                 __props__=None):
        """
        Create a ProjectMember resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: Environment slugs to grant the member access to
        :param pulumi.Input[str] role: Identifier of the project role
        :param pulumi.Input[str] slug: Member's slug
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectMemberArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ProjectMember resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProjectMemberArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectMemberArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['Type']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectMemberArgs.__new__(ProjectMemberArgs)

            __props__.__dict__["environments"] = environments
            __props__.__dict__["role"] = role
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["member"] = None
        super(ProjectMember, __self__).__init__(
            'doppler-native:projects/v3:ProjectMember',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ProjectMember':
        """
        Get an existing ProjectMember resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ProjectMemberArgs.__new__(ProjectMemberArgs)

        __props__.__dict__["environments"] = None
        __props__.__dict__["member"] = None
        __props__.__dict__["role"] = None
        __props__.__dict__["slug"] = None
        __props__.__dict__["type"] = None
        return ProjectMember(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def environments(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Environment slugs to grant the member access to
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def member(self) -> pulumi.Output[Optional['outputs.MemberProperties']]:
        return pulumi.get(self, "member")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[str]]:
        """
        Identifier of the project role
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        Member's slug
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output['Type']:
        return pulumi.get(self, "type")

