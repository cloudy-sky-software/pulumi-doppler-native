# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities

__all__ = [
    'ListProjectRolesPermissionsProperties',
    'AwaitableListProjectRolesPermissionsProperties',
    'list_project_roles_permissions',
    'list_project_roles_permissions_output',
]

@pulumi.output_type
class ListProjectRolesPermissionsProperties:
    def __init__(__self__, permissions=None):
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


class AwaitableListProjectRolesPermissionsProperties(ListProjectRolesPermissionsProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListProjectRolesPermissionsProperties(
            permissions=self.permissions)


def list_project_roles_permissions(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListProjectRolesPermissionsProperties:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('doppler-native:projects/v3:listProjectRolesPermissions', __args__, opts=opts, typ=ListProjectRolesPermissionsProperties).value

    return AwaitableListProjectRolesPermissionsProperties(
        permissions=pulumi.get(__ret__, 'permissions'))
def list_project_roles_permissions_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[ListProjectRolesPermissionsProperties]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('doppler-native:projects/v3:listProjectRolesPermissions', __args__, opts=opts, typ=ListProjectRolesPermissionsProperties)
    return __ret__.apply(lambda __response__: ListProjectRolesPermissionsProperties(
        permissions=pulumi.get(__response__, 'permissions')))
