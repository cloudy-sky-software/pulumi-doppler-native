# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetProjectMemberPropertiesMemberProperties',
    'GetProjectMemberPropertiesMemberPropertiesRoleProperties',
    'GetProjectPropertiesProjectProperties',
    'GetProjectRolePropertiesRoleProperties',
    'ListProjectMembersPropertiesMembersItemProperties',
    'ListProjectMembersPropertiesMembersItemPropertiesRoleProperties',
    'ListProjectRolesPropertiesRolesItemProperties',
    'ListProjectsPropertiesProjectsItemProperties',
    'MemberProperties',
    'MemberPropertiesRoleProperties',
    'ProjectProperties',
    'RoleProperties',
]

@pulumi.output_type
class GetProjectMemberPropertiesMemberProperties(dict):
    def __init__(__self__, *,
                 access_all_environments: Optional[bool] = None,
                 environments: Optional[Sequence[str]] = None,
                 role: Optional['outputs.GetProjectMemberPropertiesMemberPropertiesRoleProperties'] = None,
                 slug: Optional[str] = None,
                 type: Optional[str] = None):
        if access_all_environments is None:
            access_all_environments = True
        if access_all_environments is not None:
            pulumi.set(__self__, "access_all_environments", access_all_environments)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessAllEnvironments")
    def access_all_environments(self) -> Optional[bool]:
        return pulumi.get(self, "access_all_environments")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def role(self) -> Optional['outputs.GetProjectMemberPropertiesMemberPropertiesRoleProperties']:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProjectMemberPropertiesMemberPropertiesRoleProperties(dict):
    def __init__(__self__, *,
                 identifier: Optional[str] = None):
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetProjectPropertiesProjectProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetProjectRolePropertiesRoleProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 identifier: Optional[str] = None,
                 is_custom_role: Optional[bool] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_custom_role is None:
            is_custom_role = True
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class ListProjectMembersPropertiesMembersItemProperties(dict):
    def __init__(__self__, *,
                 access_all_environments: Optional[bool] = None,
                 environments: Optional[Sequence[str]] = None,
                 role: Optional['outputs.ListProjectMembersPropertiesMembersItemPropertiesRoleProperties'] = None,
                 slug: Optional[str] = None,
                 type: Optional[str] = None):
        if access_all_environments is None:
            access_all_environments = True
        if access_all_environments is not None:
            pulumi.set(__self__, "access_all_environments", access_all_environments)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessAllEnvironments")
    def access_all_environments(self) -> Optional[bool]:
        return pulumi.get(self, "access_all_environments")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def role(self) -> Optional['outputs.ListProjectMembersPropertiesMembersItemPropertiesRoleProperties']:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ListProjectMembersPropertiesMembersItemPropertiesRoleProperties(dict):
    def __init__(__self__, *,
                 identifier: Optional[str] = None):
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class ListProjectRolesPropertiesRolesItemProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 identifier: Optional[str] = None,
                 is_custom_role: Optional[bool] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_custom_role is None:
            is_custom_role = True
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class ListProjectsPropertiesProjectsItemProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 slug: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class MemberProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessAllEnvironments":
            suggest = "access_all_environments"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MemberProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MemberProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MemberProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_all_environments: Optional[bool] = None,
                 environments: Optional[Sequence[str]] = None,
                 role: Optional['outputs.MemberPropertiesRoleProperties'] = None,
                 slug: Optional[str] = None,
                 type: Optional[str] = None):
        if access_all_environments is None:
            access_all_environments = True
        if access_all_environments is not None:
            pulumi.set(__self__, "access_all_environments", access_all_environments)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessAllEnvironments")
    def access_all_environments(self) -> Optional[bool]:
        return pulumi.get(self, "access_all_environments")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def role(self) -> Optional['outputs.MemberPropertiesRoleProperties']:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MemberPropertiesRoleProperties(dict):
    def __init__(__self__, *,
                 identifier: Optional[str] = None):
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class ProjectProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RoleProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "isCustomRole":
            suggest = "is_custom_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 identifier: Optional[str] = None,
                 is_custom_role: Optional[bool] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_custom_role is None:
            is_custom_role = True
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


