# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'ListProjectMembersProperties',
    'AwaitableListProjectMembersProperties',
    'list_project_members',
    'list_project_members_output',
]

@pulumi.output_type
class ListProjectMembersProperties:
    def __init__(__self__, members=None):
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.ListProjectMembersPropertiesMembersItemProperties']]:
        return pulumi.get(self, "members")


class AwaitableListProjectMembersProperties(ListProjectMembersProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListProjectMembersProperties(
            members=self.members)


def list_project_members(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListProjectMembersProperties:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('doppler-native:projects/v3:listProjectMembers', __args__, opts=opts, typ=ListProjectMembersProperties).value

    return AwaitableListProjectMembersProperties(
        members=pulumi.get(__ret__, 'members'))
def list_project_members_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[ListProjectMembersProperties]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('doppler-native:projects/v3:listProjectMembers', __args__, opts=opts, typ=ListProjectMembersProperties)
    return __ret__.apply(lambda __response__: ListProjectMembersProperties(
        members=pulumi.get(__response__, 'members')))
