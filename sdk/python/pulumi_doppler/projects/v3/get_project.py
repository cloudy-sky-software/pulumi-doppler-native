# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetProjectProperties',
    'AwaitableGetProjectProperties',
    'get_project',
    'get_project_output',
]

@pulumi.output_type
class GetProjectProperties:
    def __init__(__self__, project=None):
        if project and not isinstance(project, dict):
            raise TypeError("Expected argument 'project' to be a dict")
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def project(self) -> Optional['outputs.GetProjectPropertiesProjectProperties']:
        return pulumi.get(self, "project")


class AwaitableGetProjectProperties(GetProjectProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectProperties(
            project=self.project)


def get_project(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectProperties:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('doppler-native:projects/v3:getProject', __args__, opts=opts, typ=GetProjectProperties).value

    return AwaitableGetProjectProperties(
        project=pulumi.get(__ret__, 'project'))
def get_project_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProjectProperties]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('doppler-native:projects/v3:getProject', __args__, opts=opts, typ=GetProjectProperties)
    return __ret__.apply(lambda __response__: GetProjectProperties(
        project=pulumi.get(__response__, 'project')))
