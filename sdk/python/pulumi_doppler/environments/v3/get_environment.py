# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetEnvironmentProperties',
    'AwaitableGetEnvironmentProperties',
    'get_environment',
    'get_environment_output',
]

@pulumi.output_type
class GetEnvironmentProperties:
    def __init__(__self__, environment=None):
        if environment and not isinstance(environment, dict):
            raise TypeError("Expected argument 'environment' to be a dict")
        pulumi.set(__self__, "environment", environment)

    @property
    @pulumi.getter
    def environment(self) -> Optional['outputs.GetEnvironmentPropertiesEnvironmentProperties']:
        return pulumi.get(self, "environment")


class AwaitableGetEnvironmentProperties(GetEnvironmentProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnvironmentProperties(
            environment=self.environment)


def get_environment(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnvironmentProperties:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('doppler-native:environments/v3:getEnvironment', __args__, opts=opts, typ=GetEnvironmentProperties).value

    return AwaitableGetEnvironmentProperties(
        environment=pulumi.get(__ret__, 'environment'))
def get_environment_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnvironmentProperties]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('doppler-native:environments/v3:getEnvironment', __args__, opts=opts, typ=GetEnvironmentProperties)
    return __ret__.apply(lambda __response__: GetEnvironmentProperties(
        environment=pulumi.get(__response__, 'environment')))
