# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'ListInvitesProperties',
    'AwaitableListInvitesProperties',
    'list_invites',
    'list_invites_output',
]

@pulumi.output_type
class ListInvitesProperties:
    def __init__(__self__, invites=None):
        if invites and not isinstance(invites, list):
            raise TypeError("Expected argument 'invites' to be a list")
        pulumi.set(__self__, "invites", invites)

    @property
    @pulumi.getter
    def invites(self) -> Optional[Sequence['outputs.ListInvitesPropertiesInvitesItemProperties']]:
        return pulumi.get(self, "invites")


class AwaitableListInvitesProperties(ListInvitesProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListInvitesProperties(
            invites=self.invites)


def list_invites(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListInvitesProperties:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('doppler-native:workplace/v3:listInvites', __args__, opts=opts, typ=ListInvitesProperties).value

    return AwaitableListInvitesProperties(
        invites=pulumi.get(__ret__, 'invites'))
def list_invites_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListInvitesProperties]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('doppler-native:workplace/v3:listInvites', __args__, opts=opts, typ=ListInvitesProperties)
    return __ret__.apply(lambda __response__: ListInvitesProperties(
        invites=pulumi.get(__response__, 'invites')))
