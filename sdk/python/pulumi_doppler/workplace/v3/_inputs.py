# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'WorkplaceRolePropertiesArgs',
    'WorkplaceRolePropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class WorkplaceRolePropertiesArgsDict(TypedDict):
        """
        You may provide an identifier OR permissions, but not both
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        Identifier of an existing workplace role
        """
        permissions: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Workplace permissions to grant
        """
elif False:
    WorkplaceRolePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkplaceRolePropertiesArgs:
    def __init__(__self__, *,
                 identifier: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        You may provide an identifier OR permissions, but not both
        :param pulumi.Input[str] identifier: Identifier of an existing workplace role
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: Workplace permissions to grant
        """
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of an existing workplace role
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Workplace permissions to grant
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "permissions", value)


