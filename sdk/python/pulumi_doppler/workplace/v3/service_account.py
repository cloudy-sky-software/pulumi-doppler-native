# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceAccountArgs', 'ServiceAccount']

@pulumi.input_type
class ServiceAccountArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 workplace_role: Optional[pulumi.Input['WorkplaceRolePropertiesArgs']] = None):
        """
        The set of arguments for constructing a ServiceAccount resource.
        :param pulumi.Input['WorkplaceRolePropertiesArgs'] workplace_role: You may provide an identifier OR permissions, but not both
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if workplace_role is not None:
            pulumi.set(__self__, "workplace_role", workplace_role)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="workplaceRole")
    def workplace_role(self) -> Optional[pulumi.Input['WorkplaceRolePropertiesArgs']]:
        """
        You may provide an identifier OR permissions, but not both
        """
        return pulumi.get(self, "workplace_role")

    @workplace_role.setter
    def workplace_role(self, value: Optional[pulumi.Input['WorkplaceRolePropertiesArgs']]):
        pulumi.set(self, "workplace_role", value)


class ServiceAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 workplace_role: Optional[pulumi.Input[Union['WorkplaceRolePropertiesArgs', 'WorkplaceRolePropertiesArgsDict']]] = None,
                 __props__=None):
        """
        Create a ServiceAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['WorkplaceRolePropertiesArgs', 'WorkplaceRolePropertiesArgsDict']] workplace_role: You may provide an identifier OR permissions, but not both
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ServiceAccountArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ServiceAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 workplace_role: Optional[pulumi.Input[Union['WorkplaceRolePropertiesArgs', 'WorkplaceRolePropertiesArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceAccountArgs.__new__(ServiceAccountArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["workplace_role"] = workplace_role
            __props__.__dict__["service_account"] = None
        super(ServiceAccount, __self__).__init__(
            'doppler-native:workplace/v3:ServiceAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ServiceAccount':
        """
        Get an existing ServiceAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ServiceAccountArgs.__new__(ServiceAccountArgs)

        __props__.__dict__["name"] = None
        __props__.__dict__["service_account"] = None
        __props__.__dict__["workplace_role"] = None
        return ServiceAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Output[Optional['outputs.ServiceAccountProperties']]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="workplaceRole")
    def workplace_role(self) -> pulumi.Output[Optional['outputs.WorkplaceRoleProperties']]:
        """
        You may provide an identifier OR permissions, but not both
        """
        return pulumi.get(self, "workplace_role")

