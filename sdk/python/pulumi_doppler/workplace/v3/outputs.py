# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ApiTokenProperties',
    'GetAuditUserPropertiesWorkplaceUserProperties',
    'GetAuditUserPropertiesWorkplaceUserPropertiesUserProperties',
    'GetGroupPropertiesGroupProperties',
    'GetGroupPropertiesGroupPropertiesDefaultProjectRoleProperties',
    'GetGroupPropertiesGroupPropertiesMembersItemProperties',
    'GetGroupPropertiesGroupPropertiesProjectsItemProperties',
    'GetGroupPropertiesGroupPropertiesProjectsItemPropertiesRoleProperties',
    'GetMemberPropertiesGroupProperties',
    'GetMemberPropertiesGroupPropertiesDefaultProjectRoleProperties',
    'GetMemberPropertiesGroupPropertiesMembersItemProperties',
    'GetMemberPropertiesGroupPropertiesProjectsItemProperties',
    'GetMemberPropertiesGroupPropertiesProjectsItemPropertiesRoleProperties',
    'GetServiceAccountPropertiesServiceAccountProperties',
    'GetServiceAccountPropertiesServiceAccountPropertiesWorkplaceRoleProperties',
    'GetServiceAccountTokenPropertiesApiTokenProperties',
    'GetUserPropertiesWorkplaceUserProperties',
    'GetUserPropertiesWorkplaceUserPropertiesUserProperties',
    'GetWorkplacePropertiesWorkplaceProperties',
    'GetWorkplaceRolePropertiesRoleProperties',
    'GroupProperties',
    'GroupPropertiesDefaultProjectRoleProperties',
    'GroupPropertiesMembersItemProperties',
    'GroupPropertiesProjectsItemProperties',
    'GroupPropertiesProjectsItemPropertiesRoleProperties',
    'ListGroupsPropertiesGroupsItemProperties',
    'ListGroupsPropertiesGroupsItemPropertiesDefaultProjectRoleProperties',
    'ListInvitesPropertiesInvitesItemProperties',
    'ListInvitesPropertiesInvitesItemPropertiesWorkplaceRoleProperties',
    'ListServiceAccountTokensPropertiesApiTokensItemProperties',
    'ListServiceAccountsPropertiesServiceAccountsItemProperties',
    'ListServiceAccountsPropertiesServiceAccountsItemPropertiesWorkplaceRoleProperties',
    'ListUsersPropertiesWorkplaceUsersItemProperties',
    'ListUsersPropertiesWorkplaceUsersItemPropertiesUserProperties',
    'ListWorkplaceRolesPropertiesRolesItemProperties',
    'RoleProperties',
    'ServiceAccountProperties',
    'ServiceAccountPropertiesWorkplaceRoleProperties',
    'WorkplaceProperties',
    'WorkplaceRoleProperties',
]

@pulumi.output_type
class ApiTokenProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "expiresAt":
            suggest = "expires_at"
        elif key == "lastSeenAt":
            suggest = "last_seen_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiTokenProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiTokenProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiTokenProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 expires_at: Optional[str] = None,
                 last_seen_at: Optional[str] = None,
                 name: Optional[str] = None,
                 slug: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if last_seen_at is not None:
            pulumi.set(__self__, "last_seen_at", last_seen_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[str]:
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter(name="lastSeenAt")
    def last_seen_at(self) -> Optional[str]:
        return pulumi.get(self, "last_seen_at")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetAuditUserPropertiesWorkplaceUserProperties(dict):
    def __init__(__self__, *,
                 access: Optional[str] = None,
                 created_at: Optional[str] = None,
                 id: Optional[str] = None,
                 user: Optional['outputs.GetAuditUserPropertiesWorkplaceUserPropertiesUserProperties'] = None):
        if access is not None:
            pulumi.set(__self__, "access", access)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def user(self) -> Optional['outputs.GetAuditUserPropertiesWorkplaceUserPropertiesUserProperties']:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetAuditUserPropertiesWorkplaceUserPropertiesUserProperties(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 mfa_enabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 profile_image_url: Optional[str] = None,
                 saml_sso_enabled: Optional[bool] = None,
                 thirdparty_sso_enabled: Optional[bool] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if mfa_enabled is None:
            mfa_enabled = True
        if mfa_enabled is not None:
            pulumi.set(__self__, "mfa_enabled", mfa_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile_image_url is not None:
            pulumi.set(__self__, "profile_image_url", profile_image_url)
        if saml_sso_enabled is None:
            saml_sso_enabled = True
        if saml_sso_enabled is not None:
            pulumi.set(__self__, "saml_sso_enabled", saml_sso_enabled)
        if thirdparty_sso_enabled is None:
            thirdparty_sso_enabled = True
        if thirdparty_sso_enabled is not None:
            pulumi.set(__self__, "thirdparty_sso_enabled", thirdparty_sso_enabled)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="mfaEnabled")
    def mfa_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "mfa_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="profileImageUrl")
    def profile_image_url(self) -> Optional[str]:
        return pulumi.get(self, "profile_image_url")

    @property
    @pulumi.getter(name="samlSsoEnabled")
    def saml_sso_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saml_sso_enabled")

    @property
    @pulumi.getter(name="thirdpartySsoEnabled")
    def thirdparty_sso_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "thirdparty_sso_enabled")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetGroupPropertiesGroupProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 default_project_role: Optional['outputs.GetGroupPropertiesGroupPropertiesDefaultProjectRoleProperties'] = None,
                 members: Optional[Sequence['outputs.GetGroupPropertiesGroupPropertiesMembersItemProperties']] = None,
                 name: Optional[str] = None,
                 projects: Optional[Sequence['outputs.GetGroupPropertiesGroupPropertiesProjectsItemProperties']] = None,
                 slug: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if default_project_role is not None:
            pulumi.set(__self__, "default_project_role", default_project_role)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="defaultProjectRole")
    def default_project_role(self) -> Optional['outputs.GetGroupPropertiesGroupPropertiesDefaultProjectRoleProperties']:
        return pulumi.get(self, "default_project_role")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.GetGroupPropertiesGroupPropertiesMembersItemProperties']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def projects(self) -> Optional[Sequence['outputs.GetGroupPropertiesGroupPropertiesProjectsItemProperties']]:
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetGroupPropertiesGroupPropertiesDefaultProjectRoleProperties(dict):
    def __init__(__self__, *,
                 identifier: Optional[str] = None):
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetGroupPropertiesGroupPropertiesMembersItemProperties(dict):
    def __init__(__self__, *,
                 slug: Optional[str] = None,
                 type: Optional[str] = None):
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGroupPropertiesGroupPropertiesProjectsItemProperties(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 role: Optional['outputs.GetGroupPropertiesGroupPropertiesProjectsItemPropertiesRoleProperties'] = None,
                 slug: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> Optional['outputs.GetGroupPropertiesGroupPropertiesProjectsItemPropertiesRoleProperties']:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetGroupPropertiesGroupPropertiesProjectsItemPropertiesRoleProperties(dict):
    def __init__(__self__, *,
                 identifier: Optional[str] = None):
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetMemberPropertiesGroupProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 default_project_role: Optional['outputs.GetMemberPropertiesGroupPropertiesDefaultProjectRoleProperties'] = None,
                 members: Optional[Sequence['outputs.GetMemberPropertiesGroupPropertiesMembersItemProperties']] = None,
                 name: Optional[str] = None,
                 projects: Optional[Sequence['outputs.GetMemberPropertiesGroupPropertiesProjectsItemProperties']] = None,
                 slug: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if default_project_role is not None:
            pulumi.set(__self__, "default_project_role", default_project_role)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="defaultProjectRole")
    def default_project_role(self) -> Optional['outputs.GetMemberPropertiesGroupPropertiesDefaultProjectRoleProperties']:
        return pulumi.get(self, "default_project_role")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.GetMemberPropertiesGroupPropertiesMembersItemProperties']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def projects(self) -> Optional[Sequence['outputs.GetMemberPropertiesGroupPropertiesProjectsItemProperties']]:
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetMemberPropertiesGroupPropertiesDefaultProjectRoleProperties(dict):
    def __init__(__self__, *,
                 identifier: Optional[str] = None):
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetMemberPropertiesGroupPropertiesMembersItemProperties(dict):
    def __init__(__self__, *,
                 slug: Optional[str] = None,
                 type: Optional[str] = None):
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMemberPropertiesGroupPropertiesProjectsItemProperties(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 role: Optional['outputs.GetMemberPropertiesGroupPropertiesProjectsItemPropertiesRoleProperties'] = None,
                 slug: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> Optional['outputs.GetMemberPropertiesGroupPropertiesProjectsItemPropertiesRoleProperties']:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetMemberPropertiesGroupPropertiesProjectsItemPropertiesRoleProperties(dict):
    def __init__(__self__, *,
                 identifier: Optional[str] = None):
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetServiceAccountPropertiesServiceAccountProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 name: Optional[str] = None,
                 slug: Optional[str] = None,
                 workplace_role: Optional['outputs.GetServiceAccountPropertiesServiceAccountPropertiesWorkplaceRoleProperties'] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if workplace_role is not None:
            pulumi.set(__self__, "workplace_role", workplace_role)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="workplaceRole")
    def workplace_role(self) -> Optional['outputs.GetServiceAccountPropertiesServiceAccountPropertiesWorkplaceRoleProperties']:
        return pulumi.get(self, "workplace_role")


@pulumi.output_type
class GetServiceAccountPropertiesServiceAccountPropertiesWorkplaceRoleProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 identifier: Optional[str] = None,
                 is_custom_role: Optional[bool] = None,
                 is_inline_role: Optional[bool] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_custom_role is None:
            is_custom_role = True
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if is_inline_role is None:
            is_inline_role = True
        if is_inline_role is not None:
            pulumi.set(__self__, "is_inline_role", is_inline_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_role")

    @property
    @pulumi.getter(name="isInlineRole")
    def is_inline_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_inline_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetServiceAccountTokenPropertiesApiTokenProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 expires_at: Optional[str] = None,
                 last_seen_at: Optional[str] = None,
                 name: Optional[str] = None,
                 slug: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if last_seen_at is not None:
            pulumi.set(__self__, "last_seen_at", last_seen_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[str]:
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter(name="lastSeenAt")
    def last_seen_at(self) -> Optional[str]:
        return pulumi.get(self, "last_seen_at")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetUserPropertiesWorkplaceUserProperties(dict):
    def __init__(__self__, *,
                 access: Optional[str] = None,
                 created_at: Optional[str] = None,
                 id: Optional[str] = None,
                 user: Optional['outputs.GetUserPropertiesWorkplaceUserPropertiesUserProperties'] = None):
        if access is not None:
            pulumi.set(__self__, "access", access)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def user(self) -> Optional['outputs.GetUserPropertiesWorkplaceUserPropertiesUserProperties']:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetUserPropertiesWorkplaceUserPropertiesUserProperties(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None,
                 profile_image_url: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile_image_url is not None:
            pulumi.set(__self__, "profile_image_url", profile_image_url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="profileImageUrl")
    def profile_image_url(self) -> Optional[str]:
        return pulumi.get(self, "profile_image_url")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetWorkplacePropertiesWorkplaceProperties(dict):
    def __init__(__self__, *,
                 billing_email: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 security_email: Optional[str] = None):
        if billing_email is not None:
            pulumi.set(__self__, "billing_email", billing_email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_email is not None:
            pulumi.set(__self__, "security_email", security_email)

    @property
    @pulumi.getter(name="billingEmail")
    def billing_email(self) -> Optional[str]:
        return pulumi.get(self, "billing_email")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityEmail")
    def security_email(self) -> Optional[str]:
        return pulumi.get(self, "security_email")


@pulumi.output_type
class GetWorkplaceRolePropertiesRoleProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 identifier: Optional[str] = None,
                 is_custom_role: Optional[bool] = None,
                 is_inline_role: Optional[bool] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_custom_role is None:
            is_custom_role = True
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if is_inline_role is None:
            is_inline_role = True
        if is_inline_role is not None:
            pulumi.set(__self__, "is_inline_role", is_inline_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_role")

    @property
    @pulumi.getter(name="isInlineRole")
    def is_inline_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_inline_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GroupProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "defaultProjectRole":
            suggest = "default_project_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 default_project_role: Optional['outputs.GroupPropertiesDefaultProjectRoleProperties'] = None,
                 members: Optional[Sequence['outputs.GroupPropertiesMembersItemProperties']] = None,
                 name: Optional[str] = None,
                 projects: Optional[Sequence['outputs.GroupPropertiesProjectsItemProperties']] = None,
                 slug: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if default_project_role is not None:
            pulumi.set(__self__, "default_project_role", default_project_role)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="defaultProjectRole")
    def default_project_role(self) -> Optional['outputs.GroupPropertiesDefaultProjectRoleProperties']:
        return pulumi.get(self, "default_project_role")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.GroupPropertiesMembersItemProperties']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def projects(self) -> Optional[Sequence['outputs.GroupPropertiesProjectsItemProperties']]:
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GroupPropertiesDefaultProjectRoleProperties(dict):
    def __init__(__self__, *,
                 identifier: Optional[str] = None):
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GroupPropertiesMembersItemProperties(dict):
    def __init__(__self__, *,
                 slug: Optional[str] = None,
                 type: Optional[str] = None):
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GroupPropertiesProjectsItemProperties(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 role: Optional['outputs.GroupPropertiesProjectsItemPropertiesRoleProperties'] = None,
                 slug: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> Optional['outputs.GroupPropertiesProjectsItemPropertiesRoleProperties']:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GroupPropertiesProjectsItemPropertiesRoleProperties(dict):
    def __init__(__self__, *,
                 identifier: Optional[str] = None):
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class ListGroupsPropertiesGroupsItemProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 default_project_role: Optional['outputs.ListGroupsPropertiesGroupsItemPropertiesDefaultProjectRoleProperties'] = None,
                 name: Optional[str] = None,
                 slug: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if default_project_role is not None:
            pulumi.set(__self__, "default_project_role", default_project_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="defaultProjectRole")
    def default_project_role(self) -> Optional['outputs.ListGroupsPropertiesGroupsItemPropertiesDefaultProjectRoleProperties']:
        return pulumi.get(self, "default_project_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class ListGroupsPropertiesGroupsItemPropertiesDefaultProjectRoleProperties(dict):
    def __init__(__self__, *,
                 identifier: Optional[str] = None):
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class ListInvitesPropertiesInvitesItemProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 email: Optional[str] = None,
                 slug: Optional[str] = None,
                 workplace_role: Optional['outputs.ListInvitesPropertiesInvitesItemPropertiesWorkplaceRoleProperties'] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if workplace_role is not None:
            pulumi.set(__self__, "workplace_role", workplace_role)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="workplaceRole")
    def workplace_role(self) -> Optional['outputs.ListInvitesPropertiesInvitesItemPropertiesWorkplaceRoleProperties']:
        return pulumi.get(self, "workplace_role")


@pulumi.output_type
class ListInvitesPropertiesInvitesItemPropertiesWorkplaceRoleProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 identifier: Optional[str] = None,
                 is_custom_role: Optional[bool] = None,
                 is_inline_role: Optional[bool] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_custom_role is None:
            is_custom_role = True
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if is_inline_role is None:
            is_inline_role = True
        if is_inline_role is not None:
            pulumi.set(__self__, "is_inline_role", is_inline_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_role")

    @property
    @pulumi.getter(name="isInlineRole")
    def is_inline_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_inline_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class ListServiceAccountTokensPropertiesApiTokensItemProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 expires_at: Optional[str] = None,
                 last_seen_at: Optional[str] = None,
                 name: Optional[str] = None,
                 slug: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if last_seen_at is not None:
            pulumi.set(__self__, "last_seen_at", last_seen_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[str]:
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter(name="lastSeenAt")
    def last_seen_at(self) -> Optional[str]:
        return pulumi.get(self, "last_seen_at")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class ListServiceAccountsPropertiesServiceAccountsItemProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 name: Optional[str] = None,
                 slug: Optional[str] = None,
                 workplace_role: Optional['outputs.ListServiceAccountsPropertiesServiceAccountsItemPropertiesWorkplaceRoleProperties'] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if workplace_role is not None:
            pulumi.set(__self__, "workplace_role", workplace_role)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="workplaceRole")
    def workplace_role(self) -> Optional['outputs.ListServiceAccountsPropertiesServiceAccountsItemPropertiesWorkplaceRoleProperties']:
        return pulumi.get(self, "workplace_role")


@pulumi.output_type
class ListServiceAccountsPropertiesServiceAccountsItemPropertiesWorkplaceRoleProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 identifier: Optional[str] = None,
                 is_custom_role: Optional[bool] = None,
                 is_inline_role: Optional[bool] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_custom_role is None:
            is_custom_role = True
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if is_inline_role is None:
            is_inline_role = True
        if is_inline_role is not None:
            pulumi.set(__self__, "is_inline_role", is_inline_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_role")

    @property
    @pulumi.getter(name="isInlineRole")
    def is_inline_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_inline_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class ListUsersPropertiesWorkplaceUsersItemProperties(dict):
    def __init__(__self__, *,
                 access: Optional[str] = None,
                 created_at: Optional[str] = None,
                 id: Optional[str] = None,
                 user: Optional['outputs.ListUsersPropertiesWorkplaceUsersItemPropertiesUserProperties'] = None):
        if access is not None:
            pulumi.set(__self__, "access", access)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def user(self) -> Optional['outputs.ListUsersPropertiesWorkplaceUsersItemPropertiesUserProperties']:
        return pulumi.get(self, "user")


@pulumi.output_type
class ListUsersPropertiesWorkplaceUsersItemPropertiesUserProperties(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None,
                 profile_image_url: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile_image_url is not None:
            pulumi.set(__self__, "profile_image_url", profile_image_url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="profileImageUrl")
    def profile_image_url(self) -> Optional[str]:
        return pulumi.get(self, "profile_image_url")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class ListWorkplaceRolesPropertiesRolesItemProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 identifier: Optional[str] = None,
                 is_custom_role: Optional[bool] = None,
                 is_inline_role: Optional[bool] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_custom_role is None:
            is_custom_role = True
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if is_inline_role is None:
            is_inline_role = True
        if is_inline_role is not None:
            pulumi.set(__self__, "is_inline_role", is_inline_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_role")

    @property
    @pulumi.getter(name="isInlineRole")
    def is_inline_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_inline_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class RoleProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "isCustomRole":
            suggest = "is_custom_role"
        elif key == "isInlineRole":
            suggest = "is_inline_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 identifier: Optional[str] = None,
                 is_custom_role: Optional[bool] = None,
                 is_inline_role: Optional[bool] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_custom_role is None:
            is_custom_role = True
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if is_inline_role is None:
            is_inline_role = True
        if is_inline_role is not None:
            pulumi.set(__self__, "is_inline_role", is_inline_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_role")

    @property
    @pulumi.getter(name="isInlineRole")
    def is_inline_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_inline_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class ServiceAccountProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "workplaceRole":
            suggest = "workplace_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceAccountProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceAccountProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceAccountProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 name: Optional[str] = None,
                 slug: Optional[str] = None,
                 workplace_role: Optional['outputs.ServiceAccountPropertiesWorkplaceRoleProperties'] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if workplace_role is not None:
            pulumi.set(__self__, "workplace_role", workplace_role)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="workplaceRole")
    def workplace_role(self) -> Optional['outputs.ServiceAccountPropertiesWorkplaceRoleProperties']:
        return pulumi.get(self, "workplace_role")


@pulumi.output_type
class ServiceAccountPropertiesWorkplaceRoleProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "isCustomRole":
            suggest = "is_custom_role"
        elif key == "isInlineRole":
            suggest = "is_inline_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceAccountPropertiesWorkplaceRoleProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceAccountPropertiesWorkplaceRoleProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceAccountPropertiesWorkplaceRoleProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 identifier: Optional[str] = None,
                 is_custom_role: Optional[bool] = None,
                 is_inline_role: Optional[bool] = None,
                 name: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_custom_role is None:
            is_custom_role = True
        if is_custom_role is not None:
            pulumi.set(__self__, "is_custom_role", is_custom_role)
        if is_inline_role is None:
            is_inline_role = True
        if is_inline_role is not None:
            pulumi.set(__self__, "is_inline_role", is_inline_role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isCustomRole")
    def is_custom_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_role")

    @property
    @pulumi.getter(name="isInlineRole")
    def is_inline_role(self) -> Optional[bool]:
        return pulumi.get(self, "is_inline_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class WorkplaceProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingEmail":
            suggest = "billing_email"
        elif key == "securityEmail":
            suggest = "security_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkplaceProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkplaceProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkplaceProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 billing_email: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 security_email: Optional[str] = None):
        if billing_email is not None:
            pulumi.set(__self__, "billing_email", billing_email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_email is not None:
            pulumi.set(__self__, "security_email", security_email)

    @property
    @pulumi.getter(name="billingEmail")
    def billing_email(self) -> Optional[str]:
        return pulumi.get(self, "billing_email")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityEmail")
    def security_email(self) -> Optional[str]:
        return pulumi.get(self, "security_email")


@pulumi.output_type
class WorkplaceRoleProperties(dict):
    """
    You may provide an identifier OR permissions, but not both
    """
    def __init__(__self__, *,
                 identifier: Optional[str] = None,
                 permissions: Optional[Sequence[str]] = None):
        """
        You may provide an identifier OR permissions, but not both
        :param str identifier: Identifier of an existing workplace role
        :param Sequence[str] permissions: Workplace permissions to grant
        """
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        Identifier of an existing workplace role
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        """
        Workplace permissions to grant
        """
        return pulumi.get(self, "permissions")


