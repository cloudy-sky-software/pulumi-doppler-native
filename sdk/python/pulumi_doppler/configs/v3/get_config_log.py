# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetConfigLogProperties',
    'AwaitableGetConfigLogProperties',
    'get_config_log',
    'get_config_log_output',
]

@pulumi.output_type
class GetConfigLogProperties:
    def __init__(__self__, log=None):
        if log and not isinstance(log, dict):
            raise TypeError("Expected argument 'log' to be a dict")
        pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def log(self) -> Optional['outputs.GetConfigLogPropertiesLogProperties']:
        return pulumi.get(self, "log")


class AwaitableGetConfigLogProperties(GetConfigLogProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigLogProperties(
            log=self.log)


def get_config_log(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigLogProperties:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('doppler-native:configs/v3:getConfigLog', __args__, opts=opts, typ=GetConfigLogProperties).value

    return AwaitableGetConfigLogProperties(
        log=pulumi.get(__ret__, 'log'))
def get_config_log_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConfigLogProperties]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('doppler-native:configs/v3:getConfigLog', __args__, opts=opts, typ=GetConfigLogProperties)
    return __ret__.apply(lambda __response__: GetConfigLogProperties(
        log=pulumi.get(__response__, 'log')))
