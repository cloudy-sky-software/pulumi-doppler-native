# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'ListSecretsProperties',
    'AwaitableListSecretsProperties',
    'list_secrets',
    'list_secrets_output',
]

@pulumi.output_type
class ListSecretsProperties:
    def __init__(__self__, secrets=None):
        if secrets and not isinstance(secrets, dict):
            raise TypeError("Expected argument 'secrets' to be a dict")
        pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter
    def secrets(self) -> Optional['outputs.ListSecretsPropertiesSecretsProperties']:
        return pulumi.get(self, "secrets")


class AwaitableListSecretsProperties(ListSecretsProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListSecretsProperties(
            secrets=self.secrets)


def list_secrets(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListSecretsProperties:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('doppler-native:configs/v3:listSecrets', __args__, opts=opts, typ=ListSecretsProperties).value

    return AwaitableListSecretsProperties(
        secrets=pulumi.get(__ret__, 'secrets'))
def list_secrets_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[ListSecretsProperties]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('doppler-native:configs/v3:listSecrets', __args__, opts=opts, typ=ListSecretsProperties)
    return __ret__.apply(lambda __response__: ListSecretsProperties(
        secrets=pulumi.get(__response__, 'secrets')))
