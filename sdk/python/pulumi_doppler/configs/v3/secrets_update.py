# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['SecretsUpdateArgs', 'SecretsUpdate']

@pulumi.input_type
class SecretsUpdateArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 change_requests: Optional[pulumi.Input[Sequence[pulumi.Input['ChangeRequestsItemPropertiesArgs']]]] = None,
                 secrets: Optional[pulumi.Input['SecretsPropertiesArgs']] = None):
        """
        The set of arguments for constructing a SecretsUpdate resource.
        :param pulumi.Input[str] config: Name of the config object.
        :param pulumi.Input[str] project: Unique identifier for the project object.
        :param pulumi.Input[Sequence[pulumi.Input['ChangeRequestsItemPropertiesArgs']]] change_requests: Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
        :param pulumi.Input['SecretsPropertiesArgs'] secrets: Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
        """
        if config is None:
            config = 'CONFIG_NAME'
        pulumi.set(__self__, "config", config)
        if project is None:
            project = 'PROJECT_NAME'
        pulumi.set(__self__, "project", project)
        if change_requests is not None:
            pulumi.set(__self__, "change_requests", change_requests)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input[str]:
        """
        Name of the config object.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input[str]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        Unique identifier for the project object.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="changeRequests")
    def change_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChangeRequestsItemPropertiesArgs']]]]:
        """
        Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
        """
        return pulumi.get(self, "change_requests")

    @change_requests.setter
    def change_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChangeRequestsItemPropertiesArgs']]]]):
        pulumi.set(self, "change_requests", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input['SecretsPropertiesArgs']]:
        """
        Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input['SecretsPropertiesArgs']]):
        pulumi.set(self, "secrets", value)


class SecretsUpdate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 change_requests: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChangeRequestsItemPropertiesArgs', 'ChangeRequestsItemPropertiesArgsDict']]]]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 secrets: Optional[pulumi.Input[Union['SecretsPropertiesArgs', 'SecretsPropertiesArgsDict']]] = None,
                 __props__=None):
        """
        Create a SecretsUpdate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ChangeRequestsItemPropertiesArgs', 'ChangeRequestsItemPropertiesArgsDict']]]] change_requests: Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
        :param pulumi.Input[str] config: Name of the config object.
        :param pulumi.Input[str] project: Unique identifier for the project object.
        :param pulumi.Input[Union['SecretsPropertiesArgs', 'SecretsPropertiesArgsDict']] secrets: Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecretsUpdateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SecretsUpdate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SecretsUpdateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecretsUpdateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 change_requests: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChangeRequestsItemPropertiesArgs', 'ChangeRequestsItemPropertiesArgsDict']]]]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 secrets: Optional[pulumi.Input[Union['SecretsPropertiesArgs', 'SecretsPropertiesArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecretsUpdateArgs.__new__(SecretsUpdateArgs)

            __props__.__dict__["change_requests"] = change_requests
            if config is None:
                config = 'CONFIG_NAME'
            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            if project is None:
                project = 'PROJECT_NAME'
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["secrets"] = secrets
        super(SecretsUpdate, __self__).__init__(
            'doppler-native:configs/v3:SecretsUpdate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SecretsUpdate':
        """
        Get an existing SecretsUpdate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SecretsUpdateArgs.__new__(SecretsUpdateArgs)

        __props__.__dict__["change_requests"] = None
        __props__.__dict__["config"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["secrets"] = None
        return SecretsUpdate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="changeRequests")
    def change_requests(self) -> pulumi.Output[Optional[Sequence['outputs.ChangeRequestsItemProperties']]]:
        """
        Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
        """
        return pulumi.get(self, "change_requests")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[str]:
        """
        Name of the config object.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        Unique identifier for the project object.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def secrets(self) -> pulumi.Output[Optional['outputs.SecretsProperties']]:
        return pulumi.get(self, "secrets")

