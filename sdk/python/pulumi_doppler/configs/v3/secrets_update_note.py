# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities

__all__ = ['SecretsUpdateNoteArgs', 'SecretsUpdateNote']

@pulumi.input_type
class SecretsUpdateNoteArgs:
    def __init__(__self__, *,
                 note: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SecretsUpdateNote resource.
        :param pulumi.Input[str] note: The note you want to set on the secret. This note will be applied to the specified secret in all environments.
        :param pulumi.Input[str] project: Unique identifier for the project object.
        :param pulumi.Input[str] secret: The name of the secret
        :param pulumi.Input[str] config: Deprecated: Config is no longer required as notes have always been set at the project level.
        """
        if note is None:
            note = 'YOUR_NOTE'
        pulumi.set(__self__, "note", note)
        if project is None:
            project = 'PROJECT_NAME'
        pulumi.set(__self__, "project", project)
        if secret is None:
            secret = 'SECRET_NAME'
        pulumi.set(__self__, "secret", secret)
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter
    def note(self) -> pulumi.Input[str]:
        """
        The note you want to set on the secret. This note will be applied to the specified secret in all environments.
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: pulumi.Input[str]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        Unique identifier for the project object.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        The name of the secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        Deprecated: Config is no longer required as notes have always been set at the project level.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)


class SecretsUpdateNote(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SecretsUpdateNote resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config: Deprecated: Config is no longer required as notes have always been set at the project level.
        :param pulumi.Input[str] note: The note you want to set on the secret. This note will be applied to the specified secret in all environments.
        :param pulumi.Input[str] project: Unique identifier for the project object.
        :param pulumi.Input[str] secret: The name of the secret
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecretsUpdateNoteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SecretsUpdateNote resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SecretsUpdateNoteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecretsUpdateNoteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecretsUpdateNoteArgs.__new__(SecretsUpdateNoteArgs)

            __props__.__dict__["config"] = config
            if note is None:
                note = 'YOUR_NOTE'
            if note is None and not opts.urn:
                raise TypeError("Missing required property 'note'")
            __props__.__dict__["note"] = note
            if project is None:
                project = 'PROJECT_NAME'
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            if secret is None:
                secret = 'SECRET_NAME'
            if secret is None and not opts.urn:
                raise TypeError("Missing required property 'secret'")
            __props__.__dict__["secret"] = secret
        super(SecretsUpdateNote, __self__).__init__(
            'doppler-native:configs/v3:SecretsUpdateNote',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SecretsUpdateNote':
        """
        Get an existing SecretsUpdateNote resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SecretsUpdateNoteArgs.__new__(SecretsUpdateNoteArgs)

        __props__.__dict__["config"] = None
        __props__.__dict__["note"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["secret"] = None
        return SecretsUpdateNote(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional[str]]:
        """
        Deprecated: Config is no longer required as notes have always been set at the project level.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def note(self) -> pulumi.Output[str]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        Unique identifier for the project object.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[str]:
        return pulumi.get(self, "secret")

