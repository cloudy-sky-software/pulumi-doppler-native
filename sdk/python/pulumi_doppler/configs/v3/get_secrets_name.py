# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities

__all__ = [
    'GetSecretsNameProperties',
    'AwaitableGetSecretsNameProperties',
    'get_secrets_name',
    'get_secrets_name_output',
]

@pulumi.output_type
class GetSecretsNameProperties:
    def __init__(__self__, names=None):
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "names")


class AwaitableGetSecretsNameProperties(GetSecretsNameProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecretsNameProperties(
            names=self.names)


def get_secrets_name(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecretsNameProperties:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('doppler-native:configs/v3:getSecretsName', __args__, opts=opts, typ=GetSecretsNameProperties).value

    return AwaitableGetSecretsNameProperties(
        names=pulumi.get(__ret__, 'names'))
def get_secrets_name_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecretsNameProperties]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('doppler-native:configs/v3:getSecretsName', __args__, opts=opts, typ=GetSecretsNameProperties)
    return __ret__.apply(lambda __response__: GetSecretsNameProperties(
        names=pulumi.get(__response__, 'names')))
