# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ChangeRequestsItemProperties',
    'ChangeRequestsItemPropertiesOriginalValueTypeProperties',
    'ChangeRequestsItemPropertiesValueTypeProperties',
    'ConfigProperties',
    'GetConfigLogPropertiesLogProperties',
    'GetConfigLogPropertiesLogPropertiesDiffItemProperties',
    'GetConfigLogPropertiesLogPropertiesUserProperties',
    'GetConfigPropertiesConfigProperties',
    'GetSecretPropertiesValueProperties',
    'GetSyncPropertiesSyncProperties',
    'ListConfigLogsPropertiesLogsItemProperties',
    'ListConfigLogsPropertiesLogsItemPropertiesUserProperties',
    'ListConfigsPropertiesConfigsItemProperties',
    'ListSecretsPropertiesSecretsProperties',
    'ListSecretsPropertiesSecretsPropertiesAlgoliaProperties',
    'ListSecretsPropertiesSecretsPropertiesDatabaseProperties',
    'ListSecretsPropertiesSecretsPropertiesStripeProperties',
    'ListSecretsPropertiesSecretsPropertiesUserProperties',
    'ListServiceTokensPropertiesTokensItemProperties',
    'LogProperties',
    'LogPropertiesDiffItemProperties',
    'LogPropertiesUserProperties',
    'SecretsProperties',
    'SecretsPropertiesAlgoliaProperties',
    'SecretsPropertiesDatabaseProperties',
    'SecretsPropertiesStripeProperties',
    'SyncProperties',
    'TokenProperties',
]

@pulumi.output_type
class ChangeRequestsItemProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originalName":
            suggest = "original_name"
        elif key == "originalValue":
            suggest = "original_value"
        elif key == "originalValueType":
            suggest = "original_value_type"
        elif key == "originalVisibility":
            suggest = "original_visibility"
        elif key == "shouldConverge":
            suggest = "should_converge"
        elif key == "shouldDelete":
            suggest = "should_delete"
        elif key == "shouldPromote":
            suggest = "should_promote"
        elif key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChangeRequestsItemProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChangeRequestsItemProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChangeRequestsItemProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 original_name: str,
                 value: str,
                 original_value: Optional[str] = None,
                 original_value_type: Optional['outputs.ChangeRequestsItemPropertiesOriginalValueTypeProperties'] = None,
                 original_visibility: Optional[str] = None,
                 should_converge: Optional[bool] = None,
                 should_delete: Optional[bool] = None,
                 should_promote: Optional[bool] = None,
                 value_type: Optional['outputs.ChangeRequestsItemPropertiesValueTypeProperties'] = None,
                 visibility: Optional[str] = None):
        """
        :param str name: The name of the secret.
        :param str original_name: The original name of the secret. Use `null` (an actual `null`, not the string `null`) or omit this parameter for new secrets. If it differs from `name` then a rename is inferred.
        :param str value: The value the secret should have. Use `null` (an actual `null`, not the string `null`) to leave the existing secret value unchanged.
        :param str original_value: The value you expect the secret to have before `name` is applied. If specified, the request will only be processed if the provided value matches what's found in Doppler.
        :param 'ChangeRequestsItemPropertiesOriginalValueTypeProperties' original_value_type: The valueType you expect the secret to have before `valueType` is applied. If specified, the request will only be processed if the provided valueType matches what's found in Doppler.
        :param str original_visibility: Must be set to either `masked`, `unmasked`, or `restricted`. The visibility you expect the secret to have before `visibility` is applied. If specified, the request will only be processed if the provided visibility matches what's found in Doppler.
        :param bool should_converge: Defaults to `false`. Can only be set to `true` if the config being updated is a branch config and there is a secret with the same name in the root config. In this case, the branch secret will inherit the value and visibility type from the root secret.
        :param bool should_delete: Defaults to `false`. If set to `true`, will delete the secret matching the `name` field.
        :param bool should_promote: Defaults to `false`. Can only be set to `true` if the config being updated is a branch config. If set to `true`, the provided secret will be set in both the branch config as well as the root config in that environment.
        :param 'ChangeRequestsItemPropertiesValueTypeProperties' value_type: The default valueType (string) will result in no validations being applied.
        :param str visibility: Must be set to either `masked`, `unmasked`, or `restricted`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "original_name", original_name)
        pulumi.set(__self__, "value", value)
        if original_value is not None:
            pulumi.set(__self__, "original_value", original_value)
        if original_value_type is not None:
            pulumi.set(__self__, "original_value_type", original_value_type)
        if original_visibility is not None:
            pulumi.set(__self__, "original_visibility", original_visibility)
        if should_converge is not None:
            pulumi.set(__self__, "should_converge", should_converge)
        if should_delete is not None:
            pulumi.set(__self__, "should_delete", should_delete)
        if should_promote is not None:
            pulumi.set(__self__, "should_promote", should_promote)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the secret.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="originalName")
    def original_name(self) -> str:
        """
        The original name of the secret. Use `null` (an actual `null`, not the string `null`) or omit this parameter for new secrets. If it differs from `name` then a rename is inferred.
        """
        return pulumi.get(self, "original_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value the secret should have. Use `null` (an actual `null`, not the string `null`) to leave the existing secret value unchanged.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="originalValue")
    def original_value(self) -> Optional[str]:
        """
        The value you expect the secret to have before `name` is applied. If specified, the request will only be processed if the provided value matches what's found in Doppler.
        """
        return pulumi.get(self, "original_value")

    @property
    @pulumi.getter(name="originalValueType")
    def original_value_type(self) -> Optional['outputs.ChangeRequestsItemPropertiesOriginalValueTypeProperties']:
        """
        The valueType you expect the secret to have before `valueType` is applied. If specified, the request will only be processed if the provided valueType matches what's found in Doppler.
        """
        return pulumi.get(self, "original_value_type")

    @property
    @pulumi.getter(name="originalVisibility")
    def original_visibility(self) -> Optional[str]:
        """
        Must be set to either `masked`, `unmasked`, or `restricted`. The visibility you expect the secret to have before `visibility` is applied. If specified, the request will only be processed if the provided visibility matches what's found in Doppler.
        """
        return pulumi.get(self, "original_visibility")

    @property
    @pulumi.getter(name="shouldConverge")
    def should_converge(self) -> Optional[bool]:
        """
        Defaults to `false`. Can only be set to `true` if the config being updated is a branch config and there is a secret with the same name in the root config. In this case, the branch secret will inherit the value and visibility type from the root secret.
        """
        return pulumi.get(self, "should_converge")

    @property
    @pulumi.getter(name="shouldDelete")
    def should_delete(self) -> Optional[bool]:
        """
        Defaults to `false`. If set to `true`, will delete the secret matching the `name` field.
        """
        return pulumi.get(self, "should_delete")

    @property
    @pulumi.getter(name="shouldPromote")
    def should_promote(self) -> Optional[bool]:
        """
        Defaults to `false`. Can only be set to `true` if the config being updated is a branch config. If set to `true`, the provided secret will be set in both the branch config as well as the root config in that environment.
        """
        return pulumi.get(self, "should_promote")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional['outputs.ChangeRequestsItemPropertiesValueTypeProperties']:
        """
        The default valueType (string) will result in no validations being applied.
        """
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        """
        Must be set to either `masked`, `unmasked`, or `restricted`.
        """
        return pulumi.get(self, "visibility")


@pulumi.output_type
class ChangeRequestsItemPropertiesOriginalValueTypeProperties(dict):
    """
    The valueType you expect the secret to have before `valueType` is applied. If specified, the request will only be processed if the provided valueType matches what's found in Doppler.
    """
    def __init__(__self__, *,
                 type: Optional['ChangeRequestsItemPropertiesOriginalValueTypePropertiesType'] = None):
        """
        The valueType you expect the secret to have before `valueType` is applied. If specified, the request will only be processed if the provided valueType matches what's found in Doppler.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional['ChangeRequestsItemPropertiesOriginalValueTypePropertiesType']:
        return pulumi.get(self, "type")


@pulumi.output_type
class ChangeRequestsItemPropertiesValueTypeProperties(dict):
    """
    The default valueType (string) will result in no validations being applied.
    """
    def __init__(__self__, *,
                 type: Optional['ChangeRequestsItemPropertiesValueTypePropertiesType'] = None):
        """
        The default valueType (string) will result in no validations being applied.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional['ChangeRequestsItemPropertiesValueTypePropertiesType']:
        return pulumi.get(self, "type")


@pulumi.output_type
class ConfigProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "initialFetchAt":
            suggest = "initial_fetch_at"
        elif key == "lastFetchAt":
            suggest = "last_fetch_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 environment: Optional[str] = None,
                 initial_fetch_at: Optional[str] = None,
                 last_fetch_at: Optional[str] = None,
                 locked: Optional[bool] = None,
                 name: Optional[str] = None,
                 project: Optional[str] = None,
                 root: Optional[bool] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if initial_fetch_at is not None:
            pulumi.set(__self__, "initial_fetch_at", initial_fetch_at)
        if last_fetch_at is not None:
            pulumi.set(__self__, "last_fetch_at", last_fetch_at)
        if locked is None:
            locked = True
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if root is None:
            root = True
        if root is not None:
            pulumi.set(__self__, "root", root)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="initialFetchAt")
    def initial_fetch_at(self) -> Optional[str]:
        return pulumi.get(self, "initial_fetch_at")

    @property
    @pulumi.getter(name="lastFetchAt")
    def last_fetch_at(self) -> Optional[str]:
        return pulumi.get(self, "last_fetch_at")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def root(self) -> Optional[bool]:
        return pulumi.get(self, "root")


@pulumi.output_type
class GetConfigLogPropertiesLogProperties(dict):
    def __init__(__self__, *,
                 config: Optional[str] = None,
                 created_at: Optional[str] = None,
                 diff: Optional[Sequence['outputs.GetConfigLogPropertiesLogPropertiesDiffItemProperties']] = None,
                 environment: Optional[str] = None,
                 html: Optional[str] = None,
                 id: Optional[str] = None,
                 project: Optional[str] = None,
                 rollback: Optional[bool] = None,
                 text: Optional[str] = None,
                 user: Optional['outputs.GetConfigLogPropertiesLogPropertiesUserProperties'] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if diff is not None:
            pulumi.set(__self__, "diff", diff)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if html is not None:
            pulumi.set(__self__, "html", html)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if rollback is None:
            rollback = True
        if rollback is not None:
            pulumi.set(__self__, "rollback", rollback)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def diff(self) -> Optional[Sequence['outputs.GetConfigLogPropertiesLogPropertiesDiffItemProperties']]:
        return pulumi.get(self, "diff")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def html(self) -> Optional[str]:
        return pulumi.get(self, "html")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def rollback(self) -> Optional[bool]:
        return pulumi.get(self, "rollback")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def user(self) -> Optional['outputs.GetConfigLogPropertiesLogPropertiesUserProperties']:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetConfigLogPropertiesLogPropertiesDiffItemProperties(dict):
    def __init__(__self__, *,
                 added: Optional[str] = None,
                 name: Optional[str] = None):
        if added is not None:
            pulumi.set(__self__, "added", added)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def added(self) -> Optional[str]:
        return pulumi.get(self, "added")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetConfigLogPropertiesLogPropertiesUserProperties(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None,
                 profile_image_url: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile_image_url is not None:
            pulumi.set(__self__, "profile_image_url", profile_image_url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="profileImageUrl")
    def profile_image_url(self) -> Optional[str]:
        return pulumi.get(self, "profile_image_url")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetConfigPropertiesConfigProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 environment: Optional[str] = None,
                 initial_fetch_at: Optional[str] = None,
                 last_fetch_at: Optional[str] = None,
                 locked: Optional[bool] = None,
                 name: Optional[str] = None,
                 project: Optional[str] = None,
                 root: Optional[bool] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if initial_fetch_at is not None:
            pulumi.set(__self__, "initial_fetch_at", initial_fetch_at)
        if last_fetch_at is not None:
            pulumi.set(__self__, "last_fetch_at", last_fetch_at)
        if locked is None:
            locked = True
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if root is None:
            root = True
        if root is not None:
            pulumi.set(__self__, "root", root)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="initialFetchAt")
    def initial_fetch_at(self) -> Optional[str]:
        return pulumi.get(self, "initial_fetch_at")

    @property
    @pulumi.getter(name="lastFetchAt")
    def last_fetch_at(self) -> Optional[str]:
        return pulumi.get(self, "last_fetch_at")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def root(self) -> Optional[bool]:
        return pulumi.get(self, "root")


@pulumi.output_type
class GetSecretPropertiesValueProperties(dict):
    def __init__(__self__, *,
                 computed: Optional[str] = None,
                 note: Optional[str] = None,
                 raw: Optional[str] = None):
        if computed is not None:
            pulumi.set(__self__, "computed", computed)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def computed(self) -> Optional[str]:
        return pulumi.get(self, "computed")

    @property
    @pulumi.getter
    def note(self) -> Optional[str]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class GetSyncPropertiesSyncProperties(dict):
    def __init__(__self__, *,
                 config: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 integration: Optional[str] = None,
                 last_synced_at: Optional[str] = None,
                 project: Optional[str] = None,
                 slug: Optional[str] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is None:
            enabled = True
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration is not None:
            pulumi.set(__self__, "integration", integration)
        if last_synced_at is not None:
            pulumi.set(__self__, "last_synced_at", last_synced_at)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def integration(self) -> Optional[str]:
        return pulumi.get(self, "integration")

    @property
    @pulumi.getter(name="lastSyncedAt")
    def last_synced_at(self) -> Optional[str]:
        return pulumi.get(self, "last_synced_at")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class ListConfigLogsPropertiesLogsItemProperties(dict):
    def __init__(__self__, *,
                 config: Optional[str] = None,
                 created_at: Optional[str] = None,
                 environment: Optional[str] = None,
                 html: Optional[str] = None,
                 id: Optional[str] = None,
                 project: Optional[str] = None,
                 rollback: Optional[bool] = None,
                 text: Optional[str] = None,
                 user: Optional['outputs.ListConfigLogsPropertiesLogsItemPropertiesUserProperties'] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if html is not None:
            pulumi.set(__self__, "html", html)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if rollback is None:
            rollback = True
        if rollback is not None:
            pulumi.set(__self__, "rollback", rollback)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def html(self) -> Optional[str]:
        return pulumi.get(self, "html")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def rollback(self) -> Optional[bool]:
        return pulumi.get(self, "rollback")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def user(self) -> Optional['outputs.ListConfigLogsPropertiesLogsItemPropertiesUserProperties']:
        return pulumi.get(self, "user")


@pulumi.output_type
class ListConfigLogsPropertiesLogsItemPropertiesUserProperties(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None,
                 profile_image_url: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile_image_url is not None:
            pulumi.set(__self__, "profile_image_url", profile_image_url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="profileImageUrl")
    def profile_image_url(self) -> Optional[str]:
        return pulumi.get(self, "profile_image_url")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class ListConfigsPropertiesConfigsItemProperties(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 environment: Optional[str] = None,
                 initial_fetch_at: Optional[str] = None,
                 last_fetch_at: Optional[str] = None,
                 locked: Optional[bool] = None,
                 name: Optional[str] = None,
                 project: Optional[str] = None,
                 root: Optional[bool] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if initial_fetch_at is not None:
            pulumi.set(__self__, "initial_fetch_at", initial_fetch_at)
        if last_fetch_at is not None:
            pulumi.set(__self__, "last_fetch_at", last_fetch_at)
        if locked is None:
            locked = True
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if root is None:
            root = True
        if root is not None:
            pulumi.set(__self__, "root", root)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="initialFetchAt")
    def initial_fetch_at(self) -> Optional[str]:
        return pulumi.get(self, "initial_fetch_at")

    @property
    @pulumi.getter(name="lastFetchAt")
    def last_fetch_at(self) -> Optional[str]:
        return pulumi.get(self, "last_fetch_at")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def root(self) -> Optional[bool]:
        return pulumi.get(self, "root")


@pulumi.output_type
class ListSecretsPropertiesSecretsProperties(dict):
    def __init__(__self__, *,
                 algolia: Optional['outputs.ListSecretsPropertiesSecretsPropertiesAlgoliaProperties'] = None,
                 database: Optional['outputs.ListSecretsPropertiesSecretsPropertiesDatabaseProperties'] = None,
                 stripe: Optional['outputs.ListSecretsPropertiesSecretsPropertiesStripeProperties'] = None,
                 user: Optional['outputs.ListSecretsPropertiesSecretsPropertiesUserProperties'] = None):
        if algolia is not None:
            pulumi.set(__self__, "algolia", algolia)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if stripe is not None:
            pulumi.set(__self__, "stripe", stripe)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def algolia(self) -> Optional['outputs.ListSecretsPropertiesSecretsPropertiesAlgoliaProperties']:
        return pulumi.get(self, "algolia")

    @property
    @pulumi.getter
    def database(self) -> Optional['outputs.ListSecretsPropertiesSecretsPropertiesDatabaseProperties']:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def stripe(self) -> Optional['outputs.ListSecretsPropertiesSecretsPropertiesStripeProperties']:
        return pulumi.get(self, "stripe")

    @property
    @pulumi.getter
    def user(self) -> Optional['outputs.ListSecretsPropertiesSecretsPropertiesUserProperties']:
        return pulumi.get(self, "user")


@pulumi.output_type
class ListSecretsPropertiesSecretsPropertiesAlgoliaProperties(dict):
    def __init__(__self__, *,
                 computed: Optional[str] = None,
                 computed_visibility: Optional[str] = None,
                 note: Optional[str] = None,
                 raw: Optional[str] = None,
                 raw_visibility: Optional[str] = None):
        if computed is not None:
            pulumi.set(__self__, "computed", computed)
        if computed_visibility is not None:
            pulumi.set(__self__, "computed_visibility", computed_visibility)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if raw is not None:
            pulumi.set(__self__, "raw", raw)
        if raw_visibility is not None:
            pulumi.set(__self__, "raw_visibility", raw_visibility)

    @property
    @pulumi.getter
    def computed(self) -> Optional[str]:
        return pulumi.get(self, "computed")

    @property
    @pulumi.getter(name="computedVisibility")
    def computed_visibility(self) -> Optional[str]:
        return pulumi.get(self, "computed_visibility")

    @property
    @pulumi.getter
    def note(self) -> Optional[str]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")

    @property
    @pulumi.getter(name="rawVisibility")
    def raw_visibility(self) -> Optional[str]:
        return pulumi.get(self, "raw_visibility")


@pulumi.output_type
class ListSecretsPropertiesSecretsPropertiesDatabaseProperties(dict):
    def __init__(__self__, *,
                 computed: Optional[str] = None,
                 computed_visibility: Optional[str] = None,
                 note: Optional[str] = None,
                 raw: Optional[str] = None,
                 raw_visibility: Optional[str] = None):
        if computed is not None:
            pulumi.set(__self__, "computed", computed)
        if computed_visibility is not None:
            pulumi.set(__self__, "computed_visibility", computed_visibility)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if raw is not None:
            pulumi.set(__self__, "raw", raw)
        if raw_visibility is not None:
            pulumi.set(__self__, "raw_visibility", raw_visibility)

    @property
    @pulumi.getter
    def computed(self) -> Optional[str]:
        return pulumi.get(self, "computed")

    @property
    @pulumi.getter(name="computedVisibility")
    def computed_visibility(self) -> Optional[str]:
        return pulumi.get(self, "computed_visibility")

    @property
    @pulumi.getter
    def note(self) -> Optional[str]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")

    @property
    @pulumi.getter(name="rawVisibility")
    def raw_visibility(self) -> Optional[str]:
        return pulumi.get(self, "raw_visibility")


@pulumi.output_type
class ListSecretsPropertiesSecretsPropertiesStripeProperties(dict):
    def __init__(__self__, *,
                 computed: Optional[str] = None,
                 computed_visibility: Optional[str] = None,
                 note: Optional[str] = None,
                 raw: Optional[str] = None,
                 raw_visibility: Optional[str] = None):
        if computed is not None:
            pulumi.set(__self__, "computed", computed)
        if computed_visibility is not None:
            pulumi.set(__self__, "computed_visibility", computed_visibility)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if raw is not None:
            pulumi.set(__self__, "raw", raw)
        if raw_visibility is not None:
            pulumi.set(__self__, "raw_visibility", raw_visibility)

    @property
    @pulumi.getter
    def computed(self) -> Optional[str]:
        return pulumi.get(self, "computed")

    @property
    @pulumi.getter(name="computedVisibility")
    def computed_visibility(self) -> Optional[str]:
        return pulumi.get(self, "computed_visibility")

    @property
    @pulumi.getter
    def note(self) -> Optional[str]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")

    @property
    @pulumi.getter(name="rawVisibility")
    def raw_visibility(self) -> Optional[str]:
        return pulumi.get(self, "raw_visibility")


@pulumi.output_type
class ListSecretsPropertiesSecretsPropertiesUserProperties(dict):
    def __init__(__self__, *,
                 computed: Optional[str] = None,
                 computed_visibility: Optional[str] = None,
                 note: Optional[str] = None,
                 raw: Optional[str] = None,
                 raw_visibility: Optional[str] = None):
        if computed is not None:
            pulumi.set(__self__, "computed", computed)
        if computed_visibility is not None:
            pulumi.set(__self__, "computed_visibility", computed_visibility)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if raw is not None:
            pulumi.set(__self__, "raw", raw)
        if raw_visibility is not None:
            pulumi.set(__self__, "raw_visibility", raw_visibility)

    @property
    @pulumi.getter
    def computed(self) -> Optional[str]:
        return pulumi.get(self, "computed")

    @property
    @pulumi.getter(name="computedVisibility")
    def computed_visibility(self) -> Optional[str]:
        return pulumi.get(self, "computed_visibility")

    @property
    @pulumi.getter
    def note(self) -> Optional[str]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")

    @property
    @pulumi.getter(name="rawVisibility")
    def raw_visibility(self) -> Optional[str]:
        return pulumi.get(self, "raw_visibility")


@pulumi.output_type
class ListServiceTokensPropertiesTokensItemProperties(dict):
    def __init__(__self__, *,
                 config: Optional[str] = None,
                 created_at: Optional[str] = None,
                 environment: Optional[str] = None,
                 expires_at: Optional[str] = None,
                 name: Optional[str] = None,
                 project: Optional[str] = None,
                 slug: Optional[str] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[str]:
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class LogProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional[str] = None,
                 created_at: Optional[str] = None,
                 diff: Optional[Sequence['outputs.LogPropertiesDiffItemProperties']] = None,
                 environment: Optional[str] = None,
                 html: Optional[str] = None,
                 id: Optional[str] = None,
                 project: Optional[str] = None,
                 rollback: Optional[bool] = None,
                 text: Optional[str] = None,
                 user: Optional['outputs.LogPropertiesUserProperties'] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if diff is not None:
            pulumi.set(__self__, "diff", diff)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if html is not None:
            pulumi.set(__self__, "html", html)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if rollback is None:
            rollback = True
        if rollback is not None:
            pulumi.set(__self__, "rollback", rollback)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def diff(self) -> Optional[Sequence['outputs.LogPropertiesDiffItemProperties']]:
        return pulumi.get(self, "diff")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def html(self) -> Optional[str]:
        return pulumi.get(self, "html")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def rollback(self) -> Optional[bool]:
        return pulumi.get(self, "rollback")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def user(self) -> Optional['outputs.LogPropertiesUserProperties']:
        return pulumi.get(self, "user")


@pulumi.output_type
class LogPropertiesDiffItemProperties(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 removed: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if removed is not None:
            pulumi.set(__self__, "removed", removed)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def removed(self) -> Optional[str]:
        return pulumi.get(self, "removed")


@pulumi.output_type
class LogPropertiesUserProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "profileImageUrl":
            suggest = "profile_image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogPropertiesUserProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogPropertiesUserProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogPropertiesUserProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None,
                 profile_image_url: Optional[str] = None,
                 username: Optional[str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile_image_url is not None:
            pulumi.set(__self__, "profile_image_url", profile_image_url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="profileImageUrl")
    def profile_image_url(self) -> Optional[str]:
        return pulumi.get(self, "profile_image_url")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class SecretsProperties(dict):
    def __init__(__self__, *,
                 algolia: Optional['outputs.SecretsPropertiesAlgoliaProperties'] = None,
                 database: Optional['outputs.SecretsPropertiesDatabaseProperties'] = None,
                 stripe: Optional['outputs.SecretsPropertiesStripeProperties'] = None):
        if algolia is not None:
            pulumi.set(__self__, "algolia", algolia)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if stripe is not None:
            pulumi.set(__self__, "stripe", stripe)

    @property
    @pulumi.getter
    def algolia(self) -> Optional['outputs.SecretsPropertiesAlgoliaProperties']:
        return pulumi.get(self, "algolia")

    @property
    @pulumi.getter
    def database(self) -> Optional['outputs.SecretsPropertiesDatabaseProperties']:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def stripe(self) -> Optional['outputs.SecretsPropertiesStripeProperties']:
        return pulumi.get(self, "stripe")


@pulumi.output_type
class SecretsPropertiesAlgoliaProperties(dict):
    def __init__(__self__, *,
                 computed: Optional[str] = None,
                 note: Optional[str] = None,
                 raw: Optional[str] = None):
        if computed is not None:
            pulumi.set(__self__, "computed", computed)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def computed(self) -> Optional[str]:
        return pulumi.get(self, "computed")

    @property
    @pulumi.getter
    def note(self) -> Optional[str]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class SecretsPropertiesDatabaseProperties(dict):
    def __init__(__self__, *,
                 computed: Optional[str] = None,
                 note: Optional[str] = None,
                 raw: Optional[str] = None):
        if computed is not None:
            pulumi.set(__self__, "computed", computed)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def computed(self) -> Optional[str]:
        return pulumi.get(self, "computed")

    @property
    @pulumi.getter
    def note(self) -> Optional[str]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class SecretsPropertiesStripeProperties(dict):
    def __init__(__self__, *,
                 computed: Optional[str] = None,
                 note: Optional[str] = None,
                 raw: Optional[str] = None):
        if computed is not None:
            pulumi.set(__self__, "computed", computed)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def computed(self) -> Optional[str]:
        return pulumi.get(self, "computed")

    @property
    @pulumi.getter
    def note(self) -> Optional[str]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class SyncProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastSyncedAt":
            suggest = "last_synced_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 integration: Optional[str] = None,
                 last_synced_at: Optional[str] = None,
                 project: Optional[str] = None,
                 slug: Optional[str] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is None:
            enabled = True
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if integration is not None:
            pulumi.set(__self__, "integration", integration)
        if last_synced_at is not None:
            pulumi.set(__self__, "last_synced_at", last_synced_at)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def integration(self) -> Optional[str]:
        return pulumi.get(self, "integration")

    @property
    @pulumi.getter(name="lastSyncedAt")
    def last_synced_at(self) -> Optional[str]:
        return pulumi.get(self, "last_synced_at")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class TokenProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "expiresAt":
            suggest = "expires_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TokenProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TokenProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TokenProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access: Optional[str] = None,
                 config: Optional[str] = None,
                 created_at: Optional[str] = None,
                 environment: Optional[str] = None,
                 expires_at: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 project: Optional[str] = None,
                 slug: Optional[str] = None):
        if access is not None:
            pulumi.set(__self__, "access", access)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[str]:
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


